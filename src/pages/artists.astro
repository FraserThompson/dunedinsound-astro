---
import { loadAndFormatCollection } from 'src/util/collection'
import { ResponsiveImage } from 'src/util/ResponsiveImage'
import SubheadersLayout from 'src/layouts/base/SubheadersLayout.astro'
import ReactWindow from 'src/components/ReactWindow'
import { artistListItem, artistGigCount } from './Artists.css'

const artists = await loadAndFormatCollection('artist')

export interface ArtistMetadata {
	totalCount: number
	cover?: ResponsiveImage
	lastGig?: number
}

let originCounts: { [key: string]: number } = {}

// Get the origins list for the dropdown
for (const artist of artists) {
	const origin = artist.entry.data.origin || 'Dunedin'
	if (!originCounts[origin]) originCounts[origin] = 0
	originCounts[origin]++
}
const originsList = Object.entries(originCounts).map(([key, value]) => [`${key} (${value})`, key])

// Cells to be passed to the virtual list
const cells = artists.reduce((acc, artist) => {
	acc.push(
		`<a 
			href="${artist.extra.absolutePath}" 
			class="${artistListItem} ${artist.entry.data.died ? 'dead' : ''}"
			data-category="${artist.entry.data.origin || 'Dunedin'},${!artist.entry.data.died ? 'active' : ''}"
			data-title="${artist.entry.data.title}"
			data-lastgig="${artist.extra.lastGig}"
			data-numbergigs="${artist.extra.gigCount}"
		>
			${artist.entry.data.title} ${artist.entry.data.origin ? '(' + artist.entry.data.origin + ')' : ''}
			<span class="${artistGigCount}"">${artist.extra.gigCount}</span>
		</a>`
	)
	return acc
}, [] as string[])
---

<SubheadersLayout poo={{ title: 'Artists' }} hideFooter={true}>
	<ReactWindow
		items={cells}
		search={'Filter artists by name'}
		sort={[
			{ value: 'title', order: 'asc', title: 'Title' },
			{ value: 'lastgig', order: 'desc', title: 'Last played' },
			{ value: 'numbergigs', order: 'desc', title: 'Most gigs' }
		]}
		filter={[
			{ value: 'active', title: 'Hide inactive', type: 'checkbox' },
			{ values: originsList, title: 'Country', type: 'select' }
		]}
		client:only
	/>
</SubheadersLayout>

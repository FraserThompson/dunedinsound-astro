---
import { loadAndFormatCollection, Shufflers } from 'src/util/collection'
import { ResponsiveImage } from 'src/util/ResponsiveImage'
import SubheadersLayout from 'src/layouts/base/SubheadersLayout.astro'
import { artistListItem, artistGigCount } from './Artists.css'
import VirtualizedList from 'src/components/VirtualizedList.astro'

const artists = await loadAndFormatCollection('artist')

export interface ArtistMetadata {
	totalCount: number
	cover?: ResponsiveImage
	lastGig?: number
}

const artistShufflers = Shufflers['artist']

let originCounts: { [key: string]: number } = {}

// Get the origins list for the dropdown
for (const artist of artists) {
	const origin = artist.entry.data.origin || 'Dunedin'
	if (!originCounts[origin]) originCounts[origin] = 0
	originCounts[origin]++
}
const originsList = Object.entries(originCounts).map(([key, value]) => [`${key} (${value})`, key])
---

<SubheadersLayout poo={{ title: 'Artists' }} hideFooter={true}>
	<VirtualizedList
		search={'Filter artists by name'}
		grid={{
			xs: 12,
			md: 4,
			lg: 2
		}}
		sort={artistShufflers['sort']}
		rowHeight={35}
		filter={artistShufflers['filter']}
	>
		{
			artists.map((artist) => (
				<a
					href={artist.extra.absolutePath}
					class={`${artistListItem} ${artist.entry.data.died ? 'dead' : ''}`}
					data-category={`${artist.entry.data.origin || 'Dunedin'},${!artist.entry.data.died ? 'active' : ''}`}
					data-title={artist.entry.data.title}
					data-lastgig={artist.extra.lastGig}
					data-numbergigs={artist.extra.gigCount}
				>
					{artist.entry.data.title} {artist.entry.data.origin ? '(' + artist.entry.data.origin + ')' : ''}
					<span class={`${artistGigCount}`}>{artist.extra.gigCount}</span>
				</a>
			))
		}
	</VirtualizedList>
</SubheadersLayout>

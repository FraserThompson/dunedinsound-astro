---
import FlexGridContainer from 'src/components/FlexGridContainer.astro'
import type { ProcessedEntry } from 'src/util/collection.ts'
import BaseLayout from '../layouts/BaseLayout.astro'
import { loadAndFormatCollection, processEntry } from 'src/util/collection'
import { ResponsiveImage } from 'src/util/ResponsiveImage'
import Tile from 'src/components/Tile.astro'
import ShuffleFilters from 'src/components/ShuffleFilters.astro'
import { getCollection } from 'astro:content'
import { Content, Subheader } from 'src/components/UtilClasses.css'
import SearchBox from 'src/components/SearchBox.astro'

const artists = await loadAndFormatCollection('artist')

export interface ArtistMetadata {
	totalCount: number
	cover?: ResponsiveImage
	lastGig?: Date
}

let artistMetadata: { [key: string]: ArtistMetadata } = {}
let origins: { [key: string]: number } = {}

for (const artist of artists) {
	const artistId = artist.entry.id

	const artistGigs = await getCollection('gig', (gig) =>
		gig.data.artists.find((gigArtist) => gigArtist.id.id === artistId)
	)

	// Process the latest gig to get its images
	const loadedGig: ProcessedEntry<'gig'> | undefined = artistGigs.length ? await processEntry(artistGigs[0]) : undefined
	const artistImages = loadedGig?.extra.artistImages[artistId] || undefined

	artistMetadata[artistId] = {
		totalCount: artistGigs.length || 0,
		cover: artistImages ? artistImages[0] : undefined,
		lastGig: artistGigs[artistGigs.length - 1]?.data.date
	}

	const origin = artist.entry.data.origin || 'Dunedin'
	if (!origins[origin]) origins[origin] = 0
	origins[origin]++
}
---

<BaseLayout topSubheaderMobile={true}>
	<div class={`${Subheader['top']}`}>
		<ShuffleFilters itemselector=".tile" boardselector="#artist-grid">
			<SearchBox className="hideMobile" placeholder="Search artists" />
			<div style={{ marginLeft: 'auto' }}>
				<div class="flex">
					<span>Sort by: </span>
					<div class="buttonGroup">
						<button data-sortby="title"> Title </button>
						<button data-sortby="lastgig" data-reversesort="true"> Last Played </button>
						<button data-sortby="numbergigs" data-reversesort="true"> Most Gigs </button>
					</div>
				</div>
				<div>
					<label>
						<input name="hideInactive" type="checkbox" data-filter="active=true" />
						Hide inactive
					</label>
				</div>
				<div>
					<select name="countries" data-filter="origin=value">
						<option value={'all'}>All origins ({artists.length})</option>
						{
							origins &&
								Object.keys(origins).map((country) => (
									<option value={country}>
										{country} ({origins[country]})
									</option>
								))
						}
					</select>
				</div>
			</div>
		</ShuffleFilters>
	</div>
	<FlexGridContainer grid={{ xs: 6, md: 3, lg: 2 }} id="artist-grid" fixedWidth={true}>
		{
			artists.map((artist) => (
				<Tile
					href={artist.extra.absolutePath}
					responsiveImage={artistMetadata[artist.entry.id]?.cover}
					responsiveImageSizes={'smallGrid'}
					title={artist.entry.data.title + (artist.entry.data.origin ? ` (${artist.entry.data.origin})` : '')}
					label={`${artistMetadata[artist.entry.id]?.totalCount} gigs`}
					containerHeight={'15vh'}
					dataAttributes={{
						'data-title': artist.entry.data.title,
						'data-machinename': artist.entry.id,
						'data-lastgig': artistMetadata[artist.entry.id]?.lastGig || 0,
						'data-numbergigs': artistMetadata[artist.entry.id]?.totalCount || 0,
						'data-active': artist.entry.data.died === undefined ? 'true' : 'false',
						'data-origin': artist.entry.data.origin || 'Dunedin'
					}}
				/>
			))
		}
	</FlexGridContainer>
	<div class={`${Subheader['bottom']} showMobile`}>
		<ShuffleFilters itemselector=".tile" boardselector="#artist-grid">
			<SearchBox placeholder="Search artists" />
		</ShuffleFilters>
	</div>
</BaseLayout>

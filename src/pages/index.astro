---
import BaseLayout from '../layouts/base/BaseLayout.astro'
import { loadAndFormatCollection, type ProcessedEntry } from 'src/util/collection'
import Tile from 'src/components/Tile.astro'
import { theme } from 'src/Theme.css'
import GigTile from 'src/components/gig/GigTile.astro'
import FlexGridContainer from 'src/components/FlexGridContainer.astro'
import GridContainer from 'src/components/GridContainer.astro'
import { gridChild } from 'src/components/GridChild.css'
import GridChild from 'src/components/GridChild.astro'

const gigs = await loadAndFormatCollection('gig')
const blogs = await loadAndFormatCollection('blog')

// Combine gigs and blogs and sorts them by date
const posts = [...gigs, ...blogs]
const combinedPosts = posts.sort((a, b) => {
	return new Date(a.entry.data.date) > new Date(b.entry.data.date) ? -1 : 1
})

// So we can display the latest gig seperately
const latestGigIndex = combinedPosts.findIndex((post) => post.entry.collection === 'gig')
const latestGig = combinedPosts[latestGigIndex] as ProcessedEntry<'gig'>
combinedPosts.splice(latestGigIndex, 1)
---

<BaseLayout>
	<GridContainer fixed={true}>
		<GridChild grid={{ xs: 12, md: 8 }}>
			<GigTile containerHeight="60vh" gig={latestGig} />
		</GridChild>
		<GridChild grid={{ xs: 12, md: 4 }}>
			{
				combinedPosts
					.slice(0, 2)
					.map((post) =>
						post.entry.collection === 'gig' ? (
							<GigTile gig={post as ProcessedEntry<'gig'>} />
						) : (
							<Tile title={post.entry.data.title} href={post.extra.absolutePath} responsiveImage={post.extra.cover} />
						)
					)
			}
		</GridChild>
		<GridChild grid={{ xs: 12 }}>
			<GridContainer fixed={true}>
				{
					combinedPosts
						.slice(2, 14)
						.map((post) => (
							<GridChild grid={{ xs: 12, md: 4, lg: 4 }}>
								{post.entry.collection === 'gig' ? (
									<GigTile className={gridChild} gig={post as ProcessedEntry<'gig'>} />
								) : (
									<Tile
										className={gridChild}
										title={post.entry.data.title}
										subtitle={post.entry.data.date.toLocaleDateString()}
										label="ARTICLE"
										href={post.extra.absolutePath}
										responsiveImage={post.extra.cover}
										containerHeight={'30vh'}
									/>
								)}
							</GridChild>
						))
				}
			</GridContainer>
		</GridChild>
	</GridContainer>
	<FlexGridContainer grid={{ xs: 6 }}>
		<Tile
			containerHeight={theme.dimensions.headerHeightWithSubheader}
			href="/gigs"
			backgroundColor={theme.color.foreground}
		>
			<h3 class="center">More Gigs</h3>
		</Tile>
		<Tile
			containerHeight={theme.dimensions.headerHeightWithSubheader}
			href="/blog"
			backgroundColor={theme.color.secondary}
		>
			<h3 class="center">More Articles</h3>
		</Tile>
	</FlexGridContainer>
</BaseLayout>

---
import SidebarNav from 'src/components/SidebarNav.astro'
import GigsMenu from 'src/components/gigs/GigsMenu.astro'
import BaseLayout from '../layouts/BaseLayout.astro'
import Tile from 'src/components/Tile.astro'
import { loadAndFormatCollection, sortGigs } from 'src/util/collection'
import ShuffleFilters from 'src/components/ShuffleFilters.astro'
import FlexGridContainer from 'src/components/FlexGridContainer'

const gigs = await loadAndFormatCollection('gig')
const sortedGigs = sortGigs(gigs)
---

<BaseLayout>
	<ShuffleFilters itemselector=".tile" boardselector="#gigs">
		<div>
			<span>Search: </span>
			<input type="text" data-filter="title=value" placeholder="Search by gig, artist, venue..." />
		</div>
	</ShuffleFilters>
	<SidebarNav>
		<GigsMenu sortedGigs={sortedGigs} slot="sidebar" />
		<FlexGridContainer xs={12} sm={12} md={12} lg={12} id="gigs" slot="content" fixedWidth={true}>
			{
				gigs.map((gig) => (
					<Tile
						href={gig.extra.absolutePath}
						responsiveImage={gig.extra.cover}
						id={encodeURIComponent(gig.entry.id)}
						label={gig.entry.data.date.toLocaleDateString()}
						title={gig.entry.data.title}
						containerHeight="30vh"
						dataAttributes={{
							'data-title': `${gig.entry.data.title} ${gig.extra.venue.data.title} ${gig.extra.artists.join(' ')}`
						}}
					>
						<ul>
							{gig.extra.artists.map((artist) => (
								<li>{artist.data.title}</li>
							))}
						</ul>
					</Tile>
				))
			}
		</FlexGridContainer>
	</SidebarNav>
</BaseLayout>

<script>
	import { elementIsVisibleInViewport } from 'src/util/helpers.ts'
	const gigs = document.querySelectorAll('.tile')
	const sidebar = document.querySelector('#sidebar')

	const options = {
		rootMargin: '-80px 0px -99%'
	}

	const callback = (entries: IntersectionObserverEntry[]) => {
		entries.forEach((entry) => {
			const sidebarItem = sidebar?.querySelector(`[href="#${entry.target.id}"]`)
			if (entry.isIntersecting) {
				sidebarItem?.classList.add('active')
				const monthGroup = sidebarItem?.closest('.monthMenu')
				if (sidebar && sidebarItem && !elementIsVisibleInViewport(sidebarItem)) {
					// @ts-ignore
					sidebar.scrollTop = monthGroup?.offsetTop
				}
			} else {
				sidebarItem?.classList.remove('active')
			}
		})
	}

	const observer = new IntersectionObserver(callback, options)
	gigs.forEach((el) => observer.observe(el))
</script>

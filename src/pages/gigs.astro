---
import BaseLayout from '../layouts/BaseLayout.astro'
import ShuffleFilters from 'src/components/ShuffleFilters.astro'
import { loadAndFormatCollection } from 'src/util/collection'
import GigsTimeline from 'src/components/gig/GigsTimeline.astro'
import GigsShuffle from 'src/components/gig/GigsShuffle.tsx'

interface Props {
	mode: 'timeline' | 'shuffle'
}

const gigs = await loadAndFormatCollection('gig')

const { mode = 'timeline' } = Astro.props
---

<BaseLayout hideFooter={true}>
	<ShuffleFilters itemselector=".tile" boardselector="#gigs">
		{
			mode === 'timeline' && (
				<div>
					<span>Search: </span>
					<input type="text" data-filter="title=value" placeholder="Search by gig, artist, venue..." />
				</div>
			)
		}
		<div>
			<span>Mode: </span>
			<a href="/gigs">
				<button class={mode === 'timeline' ? 'active' : ''}>Timeline</button>
			</a>
			<a href="/gigs/shuffle">
				<button class={mode === 'shuffle' ? 'active' : ''}>Shuffle</button>
			</a>
		</div>
	</ShuffleFilters>
	{mode === 'timeline' && <GigsTimeline gigs={gigs} />}
	{mode === 'shuffle' && <GigsShuffle gigs={gigs} client:load />}
</BaseLayout>

<script>
	import { elementIsVisibleInViewport } from 'src/util/helpers.ts'

	const gigs = document.querySelectorAll('.tile')

	const sidebar = document.querySelector('#sidebar')

	const options = {
		rootMargin: '-80px 0px -99%'
	}

	const callback = (entries: IntersectionObserverEntry[]) => {
		entries.forEach((entry) => {
			const sidebarItem = sidebar?.querySelector(`[href="#${entry.target.id}"]`)
			const monthGroup = sidebarItem?.parentElement?.parentElement

			if (entry.isIntersecting) {
				sidebarItem?.classList.add('active')
				if (sidebar && sidebarItem && !elementIsVisibleInViewport(sidebarItem)) {
					// @ts-ignore
					//sidebar.scrollTop = monthGroup?.offsetTop
				}
			} else {
				sidebarItem?.classList.remove('active')
			}
		})
	}

	const observer = new IntersectionObserver(callback, options)
	gigs.forEach((el) => observer.observe(el))
</script>

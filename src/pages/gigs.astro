---
import ShuffleFilters from 'src/components/ShuffleFilters.astro'
import { loadAndFormatCollection } from 'src/util/collection'
import SearchBox from 'src/components/SearchBox.astro'
import SidebarLayout from 'src/layouts/base/SidebarLayout.astro'
import GigsMenu from 'src/components/gig/GigsMenu.astro'
import FlexGridContainer from 'src/components/FlexGridContainer.astro'
import GigTile from 'src/components/gig/GigTile.astro'

const gigs = await loadAndFormatCollection('gig')
---

<SidebarLayout poo={{ title: 'Gigs', image: gigs[0].extra.cover?.src }}>
	<ShuffleFilters slot="subheaderTop" itemselector=".tile" boardselector="#gigs">
		<SearchBox className="hideMobile" placeholder="Filter gigs by title, artist, venue" />
		<div class="filterGroup">
			<label>Mode: </label>
			<div class="buttonGroup">
				<a href="/gigs">
					<button class={'active'}>Timeline</button>
				</a>
				<a href="/gigs/shuffle">
					<button>Shuffle</button>
				</a>
			</div>
		</div>
	</ShuffleFilters>
	<GigsMenu slot="sidebarMenu" transition:persist />
	<FlexGridContainer grid={{ xs: 12 }} id="gigs" slot="content" fixedWidth={true}>
		{gigs.map((gig) => <GigTile gig={gig} responsiveImageSizes="full" />)}
	</FlexGridContainer>
	<ShuffleFilters slot="subheaderBottomMobile" itemselector=".tile" boardselector="#gigs">
		<SearchBox placeholder="Filter gigs by title, artist, venue" />
	</ShuffleFilters>
</SidebarLayout>

<script>
	// Polyfilled because some mobile browsers seem to implement
	// the spec differently.
	import { scrollIntoView } from "seamless-scroll-polyfill"

	document.addEventListener('astro:page-load', () => {
		const gigs = document.querySelectorAll('#gigs .tile')

		// See SidebarNav.astro
		const sidebar = document.querySelector('sidebar-wrapper')

		const options = {
			rootMargin: '-40px 0px -95% 0px'
		}

		/**
		 * Highlights gig in the sidebar when its scrolled over on the main page.
		 */
		const callback = (entries: IntersectionObserverEntry[]) => {
			entries.forEach((entry) => {
				const sidebarItem = sidebar?.querySelector<HTMLElement>(`[href="#${entry.target.id}"]`)
				if (entry.isIntersecting && sidebarItem) {
					sidebarItem?.classList.add('active')
					scrollIntoView(sidebarItem, { behavior: 'smooth', block: 'center' })
				} else {
					sidebarItem?.classList.remove('active')
				}
			})
		}

		const observer = new IntersectionObserver(callback, options)
		gigs?.forEach((el) => observer.observe(el))
	})
</script>

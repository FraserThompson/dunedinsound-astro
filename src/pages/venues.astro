---
import { loadAndFormatCollection, type ProcessedEntry } from 'src/util/collection'
import Map from 'src/components/venue/Map.astro'
import ShuffleFilters from 'src/components/ShuffleFilters.astro'
import ActiveIndicator from 'src/components/ActiveIndicator.astro'
import SocialLinks from 'src/components/SocialLinks.astro'
import EntryMenu from 'src/components/EntryMenu.astro'
import Image2 from 'src/components/Image2.astro'
import SidebarLayout from 'src/layouts/base/SidebarLayout.astro'
import { theme } from '../Theme.css'
import AllAgesIndicator from 'src/components/AllAgesIndicator.astro'
import SeriesIndicator from 'src/components/SeriesIndicator.astro'

const venues = await loadAndFormatCollection('venue')

// Group venues which exist in the same spot
const groupedVenues = Object.values(
	venues.reduce(
		(acc, venue) => {
			const index = `${venue.entry.data.lng}${venue.entry.data.lat}`
			if (!acc[index]) {
				acc[index] = []
			}
			acc[index].push(venue)
			acc[index].sort((a, b) => (a.entry.data.date?.getTime() || 0) - (b.entry.data.date?.getTime() || 0))
			return acc
		},
		{} as { [key: string]: ProcessedEntry<'venue'>[] }
	)
)

// Markers use the last venue in the group (will be the latest)
const markers = groupedVenues.map((venueList) => ({
	coords: [venueList[venueList.length - 1].entry.data.lng, venueList[venueList.length - 1].entry.data.lat],
	class: venueList[venueList.length - 1].entry.data.died === undefined ? undefined : 'dead-marker'
}))
---

<SidebarLayout hideFooter={true} hasSubheaderBottomMobile={true} poo={{ title: 'Venues' }}>
	<ShuffleFilters
		slot="subheaderTop"
		search="Filter venues by name"
		filter={[
			{
				title: 'All ages only',
				value: 'allages',
				type: 'checkbox'
			},
			{
				title: 'Hide dead',
				value: 'active',
				type: 'checkbox'
			},
			{
				title: 'Hide alive',
				value: 'dead',
				type: 'checkbox'
			}
		]}
	/>
	<EntryMenu collectionEntries={venues} slot="sidebarMenu" transition:persist />
	<Map markers={markers} slot="content">
		<div slot="popups">
			{
				groupedVenues.map((venueList) => (
					<div class="popup">
						{venueList.map((venue) => (
							<div style={{ display: 'flex', flexDirection: 'column' }}>
								<div style={{ marginBottom: 'auto' }}>
									<h3 class="center" style={{ marginBottom: '0px' }}>
										{venue.entry.data.title}
									</h3>
									<div
										class="center"
										style={{
											marginTop: '0',
											marginBottom: '10px',
											gap: '10px'
										}}
									>
										<ActiveIndicator entry={venue} />
										{venue.entry.data.allAges && <AllAgesIndicator />}
										{venue.entry.data.series && <SeriesIndicator />}
									</div>
								</div>
								<SocialLinks links={venue.entry.data.links} />
								{venue.extra.cover && (
									<a
										title={venue.entry.data.title}
										href={venue.extra.absolutePath}
										style={{
											display: 'block',
											minWidth: '128px',
											border: theme.borders.contrast,
											borderRadius: '6px',
											aspectRatio: '3/2'
										}}
									>
										<Image2 responsiveImage={venue.extra.cover} />
									</a>
								)}
								<div class="center" style={{ paddingTop: '5px' }}>
									<a class="button" title={venue.entry.data.title} href={venue.extra.absolutePath}>
										See <strong>{venue.extra.gigCount}</strong> gig{venue.extra.gigCount > 1 ? 's' : ''}{' '}
										{venue.entry.data.series ? 'in this series' : 'at this venue'}
									</a>
								</div>
							</div>
						))}
					</div>
				))
			}
		</div>
	</Map>
</SidebarLayout>

<style is:global>
	div.dead-marker:before {
		content: '✝';
		color: white;
		font-size: 2.5em;
	}
</style>

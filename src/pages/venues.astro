---
import { loadAndFormatCollection, type ProcessedEntry } from 'src/util/collection'
import Map from 'src/components/venue/Map.astro'
import ShuffleFilters from 'src/components/ShuffleFilters.astro'
import ActiveIndicator from 'src/components/ActiveIndicator.astro'
import SocialLinks from 'src/components/SocialLinks.astro'
import EntryMenu from 'src/components/EntryMenu.astro'
import Image2 from 'src/components/Image2.astro'
import SearchBox from 'src/components/SearchBox.astro'
import SidebarLayout from 'src/layouts/base/SidebarLayout.astro'
import { theme } from 'src/Theme.css'
import AllAgesIndicator from 'src/components/AllAgesIndicator.astro'

const venues = await loadAndFormatCollection('venue')

// Group venues which exist in the same spot
const groupedVenues = Object.values(
	venues.reduce(
		(acc, venue) => {
			const index = `${venue.entry.data.lng}${venue.entry.data.lat}`
			if (!acc[index]) {
				acc[index] = []
			}
			acc[index].push(venue)
			acc[index].sort((a, b) => (b.entry.data.date?.getTime() || 0) - (a.entry.data.date?.getTime() || 0))
			return acc
		},
		{} as { [key: string]: ProcessedEntry<'venue'>[] }
	)
)

// Markers use the first venue in the group (will be the latest)
const markers = groupedVenues.map((venueList) => ({
	coords: [venueList[0].entry.data.lng, venueList[0].entry.data.lat],
	class: venueList[0].entry.data.died === undefined ? undefined : 'dead-marker'
}))
---

<SidebarLayout hideFooter={true} poo={{ title: 'Venues' }}>
	<ShuffleFilters slot="subheaderTop" itemselector=".sidebar-item" boardselector="#shuffle-menu">
		<SearchBox className="hideMobile" placeholder="Filter venues by name" />
		<div class="filterGroup">
			<label>
				<input name="hideNotAllAges" type="checkbox" data-filter="allages=true" />
				All ages only
			</label>
			<label>
				<input name="hideInactive" type="checkbox" data-filter="active=true" />
				Hide dead
			</label>
			<label>
				<input name="hideActive" type="checkbox" data-filter="active=false" />
				Hide alive
			</label>
		</div>
	</ShuffleFilters>
	<EntryMenu collectionEntries={venues} slot="sidebarMenu" transition:persist />
	<Map markers={markers} slot="content">
		<div slot="popups">
			{
				groupedVenues.map((venueList) => (
					<div class="popup">
						{venueList.map((venue) => (
							<div>
								<h3 class="center" style={{ marginBottom: '0' }}>
									{venue.entry.data.title}
								</h3>
								<div
									class="center"
									style={{
										marginTop: '0',
										marginBottom: '10px',
										display: 'flex',
										justifyContent: 'center',
										gap: '10px'
									}}
								>
									<ActiveIndicator died={venue.entry.data.died} born={venue.entry.data.date} inactiveText={'Defunct'} />
									{venue.entry.data.allAges && <AllAgesIndicator />}
								</div>
								<SocialLinks links={venue.entry.data.links} />
								{venue.extra.cover && (
									<a
										title={venue.entry.data.title}
										href={venue.extra.absolutePath}
										style={{
											display: 'block',
											border: theme.borders.contrast,
											borderRadius: '5px',
											aspectRatio: '3/2'
										}}
									>
										<Image2 responsiveImage={venue.extra.cover} />
									</a>
								)}
								<div class="center" style="padding-top: 5px;">
									<a class="button" title={venue.entry.data.title} href={venue.extra.absolutePath}>
										See <strong>{venue.extra.gigCount}</strong> gig{venue.extra.gigCount > 1 ? 's' : ''} at this venue
									</a>
								</div>
							</div>
						))}
					</div>
				))
			}
		</div>
	</Map>
	<ShuffleFilters
		slot="subheaderBottomMobile"
		className="fullWidth"
		itemselector=".sidebar-item"
		boardselector="#shuffle-menu"
	>
		<SearchBox placeholder=`Filter venues by name` />
	</ShuffleFilters>
</SidebarLayout>

<style is:global>
	div.dead-marker:before {
		content: '✝';
		color: white;
		font-size: 2.5em;
	}
</style>

---
/**
 * Displays all content associated with a particular venue/artist.
 *
 * Props:
 *  - entry: The entry.
 *
 * Slots:
 *  - banner: Content to put in the banner instead of the cover image.
 */
import FlexGridContainer from 'src/components/FlexGridContainer.astro'
import { loadAndFormatCollection, loadAndFormatEntry, type ProcessedEntry } from 'src/util/collection'
import Tile from 'src/components/Tile.astro'
import DropdownMenu from 'src/components/DropdownMenu'
import Divider from 'src/components/Divider.astro'
import ContentTabs from 'src/components/ContentTabs.astro'
import Banner from 'src/components/Banner.astro'
import ActiveIndicator from 'src/components/ActiveIndicator.astro'
import { theme } from 'src/Theme.css'
import SocialLinks from 'src/components/SocialLinks.astro'
import ImageGallery from 'src/components/ImageGallery.astro'
import BlogTile from 'src/components/blog/BlogTile.astro'
import GigTile from 'src/components/gig/GigTile.astro'
import { contentByEntryActiveWrapper, spacer } from './ContentByEntry.css'
import { formattedDate } from 'src/util/names'
import { socialLinksWrapper } from './ContentByEntry.css'

interface Props {
	entry: ProcessedEntry<'artist'> | ProcessedEntry<'venue'>
}

const { entry } = Astro.props

const gigs = await loadAndFormatCollection('gig', (thing) => {
	const matchByArtist = thing.entry.data.artists?.find((artist) => artist.id.id === entry.entry.id)
	const matchByVenue = thing.entry.data.venue.id === entry.entry.id
	return matchByArtist || matchByVenue
})

const gigsByYear = Object.groupBy(gigs, (gig) => gig.entry.data.date.getFullYear())

const gigsYearDropdownItems = Object.entries(gigsByYear)
	.reverse()
	.map(([year, gigs]) => ({
		year: year,
		count: gigs?.length || 0
	}))

// Find related blogs
const blogs = await loadAndFormatCollection('blog', (thing) => {
	const matchByArtist = thing.entry.data.relatedArtists?.find((artist) => artist.id === entry.entry.id)
	const matchByVenue = thing.entry.data.relatedVenues?.find((venue) => venue.id === entry.entry.id)
	return matchByArtist || matchByVenue
})

// Find related vaultsessions
const vaultSessions = await loadAndFormatCollection('vaultsession', (thing) => {
	const matchByArtist = thing.entry.data.artist.id === entry.entry.id
	return matchByArtist
})

const entryData = entry.entry.data
const entryExtra = entry.extra
const collection = entry.entry.collection

const images = entryExtra.images

let tabs = [{ title: `Gigs (${gigs.length})`, id: 'gigs' }]
blogs.length > 0 && tabs.push({ title: `Articles (${blogs.length})`, id: 'blogs' })
images && Object.keys(images).length > 0 && tabs.push({ title: `Images (${Object.keys(images).length})`, id: 'images' })
vaultSessions.length > 0 && tabs.push({ title: `VAULT SESSION`, id: 'vaultsessions' })

// Find other entries which reference this one as an alias
const referencesThis = await loadAndFormatCollection(
	collection,
	(thing) => 'aliases' in thing.entry.data && thing.entry.data.aliases?.find((alias) => alias.id === entry.entry.id)
)

// Load this entries aliases
const thisReferences =
	'aliases' in entryData && entryData.aliases
		? Array.from(
				await Promise.all(entryData.aliases.map(async (thing) => await loadAndFormatEntry(collection, thing.id)))
			).sort((a, b) => (a.entry.data.date && b.entry.data.date && a.entry.data.date > b.entry.data.date ? -1 : 1))
		: []
// All references to or by this entry
const allReferences = [...Array.from(thisReferences), ...referencesThis]

const hasBanner = Astro.slots.has('banner')
const hasAudioculture = entryData.links && 'audioculture' in entryData.links
const hasInfo = entryData.description || hasAudioculture || !!referencesThis.length || !!thisReferences.length
---

<Banner
	title={entryData.title + ('origin' in entryData ? ` (${entryData.origin})` : '')}
	id="top"
	backgroundImage={entryExtra.cover}
	bottomMargin={`calc(${theme.dimensions.subheaderHeightNegative} * 2)`}
>
	<!-- description/audioculture quote and link to references of this -->
	{
		(
			<Fragment slot={hasInfo ? 'subtitle' : ''}>
				<div class={`${entryData.links ? spacer : ''} noCenter`} />
				{entryData.description && (
					<p>
						<strong>Summary</strong>
						<br />
						<Fragment set:html={entryData.description} />
					</p>
				)}
				{hasAudioculture && (
					<blockquote cite={entryData.links?.audioculture?.link}>
						"{entryData.links?.audioculture?.snippet}" -{' '}
						<a
							href={entryData.links?.audioculture?.link}
							title={`Read about ${entryData.title} at Audioculture`}
							target="_blank"
						>
							Audioculture
						</a>
					</blockquote>
				)}
				{!!allReferences.length && (
					<div>
						<strong>{collection === 'artist' ? 'Also performed as' : 'Other venues at this location'}</strong>
						<ul style={{ marginTop: '0px' }}>
							{allReferences.map((thing, i, arr) => (
								<li>
									<a href={thing.extra.absolutePath}>
										{thing.entry.data.title} {thing.entry.data.date ? `(${thing.entry.data.date.getFullYear()})` : ''}
									</a>
								</li>
							))}
						</ul>
					</div>
				)}
			</Fragment>
		)
	}
	{
		entryData.links && (
			<div slot="customContent" class={socialLinksWrapper}>
				<SocialLinks links={entryData.links} />
			</div>
		)
	}
	<!-- active indicator -->
	<div slot="customContent" class={contentByEntryActiveWrapper}>
		{
			('date' in entryData || 'died' in entryData) && (
				<ActiveIndicator born={entryData.date} died={entryData.died} collection={collection} />
			)
		}
	</div>
	<slot name="banner" slot={hasBanner ? 'background' : ''} />
</Banner>
<Divider
	sticky={true}
	className="noShadow"
	href="#top"
	backgroundColor={theme.color.primary}
	color={theme.color.text}
	height={theme.dimensions.subheaderHeight}
	zIndex={'7'}
>
	<h3 style={{ marginBottom: 0, textAlign: 'right' }}>{entryData.title}</h3>
</Divider>
<ContentTabs tabs={tabs}>
	<div data-tabid="gigs">
		<DropdownMenu
			direction="down"
			backgroundColor="white"
			textColor="black"
			top={theme.dimensions.subheaderHeight}
			list={gigsYearDropdownItems.map((item) => ({
				title: item.year,
				subtitle: `(${item.count})`,
				hash: `y${item.year}`
			}))}
			client:load
		/>
		{
			collection === 'venue' && !!thisReferences.length && (
				<Divider sticky={true} top={theme.dimensions.subheaderHeight} smoothScroll={true}>
					Future
				</Divider>
			)
		}
		{
			collection === 'venue' &&
				thisReferences.map((thing) => (
					<Tile
						responsiveImage={thing.extra.cover}
						backgroundStyle="center"
						href={thing.extra.absolutePath}
						containerHeight="30vh"
					>
						<h4 class="center" style={{ marginBottom: 0, color: 'white' }}>
							At this location from {'date' in thing.entry.data && thing.entry.data.date?.getFullYear()}
							{'died' in thing.entry.data && thing.entry.data.died
								? ` to ${thing.entry.data.died?.getFullYear()}`
								: ' to present'}
						</h4>
						<h3 class="center" style={{ marginBottom: 0 }}>
							{thing.entry.data.title}
						</h3>
						<h4 class="center">{thing.extra.gigCount} gigs</h4>
					</Tile>
				))
		}
		{
			Object.entries(gigsByYear)
				.reverse()
				.map(([year, gigs]) => (
					<div id={`y${year}`}>
						<Divider href={`#y${year}`} sticky={true} top={theme.dimensions.subheaderHeight} smoothScroll={true}>
							{year} ({gigs?.length})
						</Divider>
						<FlexGridContainer grid={gigs && gigs.length <= 4 ? { xs: 12, md: 6 } : { xs: 12, md: 6, lg: 3 }}>
							{gigs?.map((gig) => (
								<GigTile gig={gig} backgroundStyle="center" responsiveImageSizes={gigs.length <= 4 ? 'full' : 'grid'} />
							))}
						</FlexGridContainer>
					</div>
				))
		}
		{
			collection === 'venue' && !!referencesThis.length && (
				<Divider sticky={true} top={theme.dimensions.subheaderHeight} smoothScroll={true}>
					Past
				</Divider>
			)
		}
		{
			collection === 'venue' &&
				referencesThis.map((thing) => (
					<Tile
						responsiveImage={thing.extra.cover}
						backgroundStyle="center"
						href={thing.extra.absolutePath}
						containerHeight="30vh"
					>
						{'date' in thing.entry.data && (
							<h4 class="center" style={{ marginBottom: 0, color: 'white' }}>
								At this location {thing.entry.data.date?.getFullYear() || 'up'} to{' '}
								{thing.entry.data.died?.getFullYear()}
							</h4>
						)}
						<h3 class="center" style={{ marginBottom: 0 }}>
							{thing.entry.data.title}
						</h3>
						<h4 class="center">{thing.extra.gigCount} gigs</h4>
					</Tile>
				))
		}
	</div>
	<div data-tabid="blogs">
		<FlexGridContainer grid={{ xs: 12, md: 6, lg: 3 }}>
			{blogs.map((blog) => <BlogTile blog={blog} responsiveImageSizes={'grid'} backgroundStyle="center" />)}
		</FlexGridContainer>
	</div>
	{
		images && (
			<div data-tabid="images">
				<ImageGallery images={Object.values(images)} />
			</div>
		)
	}
	<div data-tabid="vaultsessions">
		<FlexGridContainer grid={{ xs: 12, md: 6, lg: 3 }}>
			{
				vaultSessions.map((vaultsession) => (
					<Tile
						href={vaultsession.extra.absolutePath}
						title={vaultsession.entry.data.title}
						label={formattedDate(vaultsession.entry.data.date)}
						responsiveImage={vaultsession.extra.cover}
						responsiveImageSizes={'grid'}
						backgroundStyle="center"
					/>
				))
			}
		</FlexGridContainer>
	</div>
</ContentTabs>

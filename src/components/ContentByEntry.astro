---
/**
 * Displays all content associated with a particular venue/artist.
 *
 * Props:
 *  - entry: The entry.
 *
 * Slots:
 *  - banner: Content to put in the banner instead of the cover image.
 */
import FlexGridContainer from 'src/components/FlexGridContainer.astro'
import { loadAndFormatCollection, type ProcessedEntry } from 'src/util/collection'
import Tile from 'src/components/Tile.astro'
import DropdownMenu from 'src/components/DropdownMenu'
import Divider from 'src/components/Divider.astro'
import ContentTabs from 'src/components/ContentTabs.astro'
import Banner from 'src/components/Banner.astro'
import ActiveIndicator from 'src/components/ActiveIndicator.astro'
import { theme } from 'src/Theme.css'
import SocialLinks from 'src/components/SocialLinks.astro'
import ImageGallery from 'src/components/ImageGallery.astro'
import GigTile from 'src/components/gig/GigTile.astro'

interface Props {
	entry: ProcessedEntry<'artist'> | ProcessedEntry<'venue'>
}

const { entry } = Astro.props

const gigs = await loadAndFormatCollection('gig', (thing) => {
	const matchByArtist = thing.entry.data.artists?.find((artist) => artist.id.id === entry.entry.id)
	const matchByVenue = thing.entry.data.venue.id === entry.entry.id
	return matchByArtist || matchByVenue
})

const gigsByYear = Object.groupBy(gigs, (gig) => gig.entry.data.date.getFullYear())

const gigsYearDropdownItems = Object.entries(gigsByYear)
	.reverse()
	.map(([year, gigs]) => ({
		year: year,
		count: gigs?.length || 0
	}))

// Find related blogs
const blogs = await loadAndFormatCollection('blog', (thing) => {
	const matchByArtist = thing.entry.data.relatedArtists?.find((artist) => artist.id === entry.entry.id)
	const matchByVenue = thing.entry.data.relatedVenues?.find((venue) => venue.id === entry.entry.id)
	return matchByArtist || matchByVenue
})

// Find related vaultsessions
const vaultSessions = await loadAndFormatCollection('vaultsession', (thing) => {
	const matchByArtist = thing.entry.data.artist.id === entry.entry.id
	return matchByArtist
})

const entryData = entry.entry.data
const entryExtra = entry.extra

const images = entryExtra.images

let tabs = [{ title: `Gigs (${gigs.length})`, id: 'gigs' }]
blogs.length > 0 && tabs.push({ title: `Articles (${blogs.length})`, id: 'blogs' })
images && tabs.push({ title: `Images (${Object.keys(images).length})`, id: 'images' })
vaultSessions.length > 0 && tabs.push({ title: `VAULT SESSION`, id: 'vaultsessions' })

const hasBanner = Astro.slots.has('banner')
---

<Banner
	title={entryData.title + ('origin' in entryData ? ` (${entryData.origin})` : '')}
	id="top"
	backgroundImage={entryExtra.cover}
	bottomMargin={`calc(${theme.dimensions.subheaderHeightNegative} * 2)`}
>
	<ActiveIndicator
		born={entryData.date}
		died={entryData.died}
		inactiveText={entry.entry.collection === 'artist' ? 'Inactive' : 'Defunct'}
	/>
	{entryData.links && <SocialLinks links={entryData.links} />}
	{
		entryData.description && (
			<p>
				<Fragment set:html={entryData.description} />
			</p>
		)
	}
	{
		entryData.links && 'audioculture' in entryData.links && (
			<blockquote cite={entryData.links['audioculture']?.link}>
				"{entryData.links['audioculture']?.snippet}" - <span>Audioculture</span>
			</blockquote>
		)
	}
	<slot name="banner" slot={hasBanner ? 'background' : ''} />
</Banner>
<Divider
	sticky={true}
	className="noShadow"
	href="#top"
	backgroundColor={theme.color.primary}
	color={theme.color.text}
	height={theme.dimensions.subheaderHeight}
	zIndex={'7'}
>
	<h3 style={{ marginBottom: 0, textAlign: 'right' }}>{entryData.title}</h3>
</Divider>
<ContentTabs tabs={tabs}>
	<div data-tabid="gigs">
		<DropdownMenu
			direction="down"
			top={theme.dimensions.subheaderHeight}
			list={gigsYearDropdownItems.map((item) => ({ title: `${item.year} (${item.count})`, hash: `y${item.year}` }))}
			client:load
		/>
		{
			Object.entries(gigsByYear)
				.reverse()
				.map(([year, gigs]) => (
					<div id={`y${year}`}>
						<Divider
							backgroundColor={theme.color.foreground}
							href={`#y${year}`}
							sticky={true}
							top={theme.dimensions.subheaderHeight}
							smoothScroll={true}
						>
							{year} ({gigs?.length})
						</Divider>
						<FlexGridContainer grid={gigs && gigs.length <= 2 ? { xs: 12, md: 6 } : undefined}>
							{gigs?.map((gig) => (
								<GigTile gig={gig} responsiveImageSizes={gigs.length <= 2 ? 'full' : 'grid'} />
							))}
						</FlexGridContainer>
					</div>
				))
		}
	</div>
	<div data-tabid="blogs">
		<FlexGridContainer>
			{
				blogs.map((blog) => (
					<Tile
						href={blog.extra.absolutePath}
						title={blog.entry.data.title}
						label={blog.entry.data.date.toLocaleDateString()}
						responsiveImage={blog.extra.cover}
						responsiveImageSizes={'grid'}
					/>
				))
			}
		</FlexGridContainer>
	</div>
	{
		images && (
			<div data-tabid="images">
				<ImageGallery images={Object.values(images)} />
			</div>
		)
	}
	<div data-tabid="vaultsessions">
		<FlexGridContainer>
			{
				vaultSessions.map((vaultsession) => (
					<Tile
						href={vaultsession.extra.absolutePath}
						title={vaultsession.entry.data.title}
						label={vaultsession.entry.data.date.toLocaleDateString()}
						responsiveImage={vaultsession.extra.cover}
						responsiveImageSizes={'grid'}
					/>
				))
			}
		</FlexGridContainer>
	</div>
</ContentTabs>

---
import type { ResponsiveImage } from 'src/util/image'

interface Props {
	verticalImage?: ResponsiveImage
	responsiveImage: ResponsiveImage | ResponsiveImage[]
}

const { verticalImage, responsiveImage } = Astro.props

const cssVars = {
	portraitDisplay: verticalImage ? 'none' : 'block'
}
---

<div class="wrapper">
	{!Array.isArray(responsiveImage) && <img class="backgroundImage" srcset={responsiveImage.srcset} alt="" />}
	{
		verticalImage && !Array.isArray(verticalImage) && (
			<img class="backgroundImageVertical" srcset={verticalImage.srcset} alt="" />
		)
	}
	{
		Array.isArray(responsiveImage) &&
			responsiveImage.map((responsiveImage, i) => <img class="backgroundImage" src={responsiveImage.srcset} alt="" />)
	}
</div>

<style define:vars={cssVars}>
	.wrapper {
		position: absolute;
		display: flex;
		justify-content: center;
		align-items: center;
		width: 100%;
		height: 100%;
		z-index: 0;

		.backgroundImage {
			width: 100%;
			height: 100%;
			z-index: 0;
			transition: transform 0.3s ease-in-out;
			transform: scale(1, 1);
			object-fit: cover;
		}

		.backgroundImage:nth-of-type(2) {
			display: none;
		}
		.backgroundImage:nth-of-type(3) {
			display: none;
		}

		@media screen and (orientation: landscape) {
			.backgroundImageVertical {
				display: none;
			}
		}

		@media screen and (orientation: portrait) {
			.backgroundImage {
				display: vars(--portraitDisplay);
			}
			.backgroundImageVertical {
				display: block;
			}
		}

		@media (--xs) {
			.backgroundImage:nth-of-type(2) {
				display: block;
			}
			.backgroundImage:nth-of-type(3) {
				display: block;
			}
		}
	}
</style>

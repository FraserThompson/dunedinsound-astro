---
/**
 * Wrapper for a page with a sidebar navigation.
 * Slots:
 *  - sidebarMenu: Scrollable content. Put your sidebar menu in this.
 *  - sidebarSubheaderBottomMobile: A fixed subheader at the bottom of the sidebar on mobile.
 *  - sidebarSubheaderTopMobile: A fixed subheader at the top of the sidebar on mobile.
 *  - content: Put the rest of the page in this.
 *
 * Props (all optional):
 *  - top: Offset from the top on desktop.
 *  - topMobile: Offset from top on mobile (xs).
 *  - bottom: Offset from the bottom on desktop.
 *  - bottomMobile: Offset from bottom on mobile (xs).
 *  - customButton: If true, it will not render its own button.
 *    You will need to put a button with id 'sidebar-button' somewhere on the page.
 */

import {
	sidebarWrapper,
	sidebarMenuWrapper,
	contentWrapper,
	sidebarButtonWrapper,
	offsetTop,
	offsetTopMobile,
	offsetBottom,
	offsetBottomMobile
} from './SidebarNav.css'
import { assignInlineVars } from '@vanilla-extract/dynamic'

interface Props {
	top?: string
	topMobile?: string
	bottom?: string
	bottomMobile?: string
	customButton?: boolean
}

const { top, topMobile, bottom, bottomMobile, customButton } = Astro.props

const hasSidebarSubheaderBottomMobile = Astro.slots.has('sidebarSubheaderBottomMobile')
const hasSidebarSubheaderTopMobile = Astro.slots.has('sidebarSubheaderTopMobile')
---

<sidebar-wrapper>
	<div
		id="sidebar"
		class={sidebarWrapper}
		style={assignInlineVars({
			[offsetTop]: top,
			[offsetTopMobile]: topMobile,
			[offsetBottom]: bottom,
			[offsetBottomMobile]: bottomMobile
		})}
	>
		<slot name="sidebarSubheaderTopMobile" />
		<div
			id="sidebar-menu"
			class={`${sidebarMenuWrapper} ${hasSidebarSubheaderBottomMobile ? 'hasSubheaderBottomMobile' : ''} ${hasSidebarSubheaderTopMobile ? 'hasSubheaderTopMobile': ''}`}
		>
			<slot name="sidebarMenu" />
		</div>
		<slot name="sidebarSubheaderBottomMobile" />
	</div>
</sidebar-wrapper>
{!customButton && <button id="sidebar-button" class={sidebarButtonWrapper['bar']} />}
<div
	class={contentWrapper}
	style={assignInlineVars({
		[offsetTop]: top,
		[offsetTopMobile]: topMobile,
		[offsetBottom]: bottom,
		[offsetBottomMobile]: bottomMobile
	})}
>
	<slot name="content" />
</div>

<script>
	class SidebarWrapper extends HTMLElement {
		sidebar
		button

		constructor() {
			super()
			this.sidebar = this.querySelector('#sidebar')
			this.button = document.querySelector('#sidebar-button')
		}

		toggleSidebar() {
			this.sidebar?.classList.toggle('open')
			this.button?.classList.toggle('open')
		}

		connectedCallback() {
			// Button which opens and closes the sidebar
			this.button?.addEventListener('mousedown', () => this.toggleSidebar())
		}

		disconnectedCallback() {}
	}

	customElements.define('sidebar-wrapper', SidebarWrapper)
</script>

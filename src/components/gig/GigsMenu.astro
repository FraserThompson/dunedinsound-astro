---
/**
 * Menu of all gigs on the website, sorted by date and month.
 *
 * It responds to shuffle events to filter its items.
 *
 * Props:
 *  selected (optional): it will show the artists under that gig.
 */
import { loadAndFormatCollection, sortGigs } from 'src/util/collection.ts'
import { gigLink, yearLink, monthLink, yearsMenuWrapper } from './GigsMenu.css'
import { artistsToString } from 'src/util/helpers'
import { makeHash } from 'src/util/names'
import DropdownMenu from '../DropdownMenu'
import { theme } from 'src/Theme.css'
import { MenuLi } from '../Menu.css'
import { MenuWrapper } from '../Menu.css'
import ArtistsMenu from './ArtistsMenu.astro'

interface Props {
	selected?: string
}

const gigs = await loadAndFormatCollection('gig')
const sortedGigs = sortGigs(gigs)

const { selected } = Astro.props
---

<DropdownMenu
	list={Object.keys(sortedGigs)
		.reverse()
		.map((year) => ({
			hash: makeHash(year),
			title: year
		}))}
	direction="down"
	backgroundColor={theme.color.foreground}
	heightMobile={theme.dimensions.headerHeightMobile}
	top={'0px'}
	client:load
/>

<ul is="gigs-menu" data-selected={selected} class={`${yearsMenuWrapper} yearList`} style={{ overflow: 'initial' }}>
	{
		Object.entries(sortedGigs)
			.reverse()
			.map(([year, months]) => (
				<li class={MenuLi['vertical']} id={makeHash(year)}>
					<a class={yearLink}>{year}</a>
					<ul class={`${MenuWrapper['vertical']} monthList`}>
						{Object.entries(months).map(([month, gigs]) => (
							<li class={`${MenuLi['vertical']} monthItem`}>
								<a class={monthLink}>{month}</a>
								<ul class={`${MenuWrapper['vertical']} gigList`}>
									{gigs.map((gig) => (
										<li
											class={`${MenuLi['vertical']} gigItem ${gig.entry.id === selected ? 'active' : ''}`}
											data-gig={makeHash(gig.entry.id)}
										>
											<a class={gigLink} href={!selected ? `#${makeHash(gig.entry.id)}` : gig.extra.absolutePath}>
												{gig.entry.data.title}
											</a>
											{gig.entry.id === selected && <ArtistsMenu artists={gig.extra.artists} transition:persist />}
										</li>
									))}
								</ul>
							</li>
						))}
					</ul>
				</li>
			))
	}
</ul>

<!-- 
	This is a bit of an ugly workaround.
	On the gigs page we shuffle the tiles and listen on the menu.
	On individual gig pages there are no tiles to shuffle, but ShuffleJS doesn't 
	work with nested menu items. So we shuffle this hidden list instead.
	Downside is extra DOM items, but it is what it is.
-->
{
	selected && (
		<ul id="shuffle-menu" class="hidden">
			{gigs.map((gig) => (
				<li
					id={makeHash(gig.entry.id)}
					class="hiddenItem"
					data-title={`${gig.entry.data.title} ${gig.extra.venue.data.title} ${artistsToString(gig.extra.artists)}`}
				/>
			))}
		</ul>
	)
}

<slot />

<script>
	import type Shuffle from 'shufflejs'
	import { maintainSidebarScrollPosition } from 'src/util/helpers'
import type { SidebarWrapper } from '../SidebarNav.astro.0.mts'

	maintainSidebarScrollPosition('gig')

	/**
	 * A menu of gigs.
	 *
	 * Similar to EntryMenu.astro but with subcategories for year/month.
	 *
	 * Because of these subcategories we can't Shuffle it directly, so
	 * instead we respond to shuffle events from another list.
	 */
	class GigsMenu extends HTMLUListElement {
		sidebar: SidebarWrapper | null
		gigLinks: NodeListOf<HTMLElement> | null
		artistsMenu: HTMLElement | null
		selected: string | null

		constructor() {
			super()
			this.sidebar = document.querySelector<SidebarWrapper>('sidebar-wrapper')
			this.gigLinks = this.querySelectorAll('[data-gig]')
			this.artistsMenu = this.querySelector('artists-menu')
			this.selected = this.getAttribute('data-selected')
		}

		itemClick(e: MouseEvent) {
			// Close sidebar on mobile
			// See: SidebarNav.astro
			this.sidebar?.toggleSidebar()
		}

		/**
		 * Respond to shuffle events and hide gigs/years/months.
		 * @param e
		 */
		onShuffle(e: any) {
			const shuffle = e.detail as Shuffle

			// Hide the artists menu if we're shuffling
			if (shuffle.visibleItems !== shuffle.items.length && this.selected) {
				this.artistsMenu?.classList.add('hidden')
			} else {
				this.artistsMenu?.classList.remove('hidden')
			}

			shuffle?.items?.forEach((item) => {
				const gigId = item.element.id
				const sidebarItem = this.querySelector(`[data-gig="${gigId}"]`)

				const gigList = sidebarItem?.closest('.gigList')
				if (!gigList) return

				const monthList = gigList.closest('.monthList')
				if (!monthList) return

				// Hide items filtered out by shuffle
				if (!item.isVisible) {
					sidebarItem?.classList.add('hidden')
				} else {
					sidebarItem?.classList.remove('hidden')
				}

				// Hide months without any visible gigs
				const gigsInGroup = gigList.childElementCount
				const hiddenGigsInGroup = gigList.querySelectorAll('.gigItem.hidden').length

				if (gigsInGroup === hiddenGigsInGroup) {
					gigList.parentElement?.classList.add('hidden')
				} else {
					gigList.parentElement?.classList.remove('hidden')
				}

				// Hide years without any visible months
				const monthsInYear = monthList.childElementCount
				const hiddenMonthsInYear = monthList.querySelectorAll('.monthItem.hidden').length

				if (monthsInYear === hiddenMonthsInYear) {
					monthList.parentElement?.classList.add('hidden')
				} else {
					monthList.parentElement?.classList.remove('hidden')
				}
			})
		}

		connectedCallback() {
			document.addEventListener('shuffle-filter', (e) => this.onShuffle(e), false)
			!this.selected && this.gigLinks?.forEach((gigLink) => gigLink.addEventListener('click', (e) => this.itemClick(e)))
		}

		disconnectedCallback() {
			document.removeEventListener('shuffle-filter', (e) => this.onShuffle(e))
			!this.selected &&
				this.gigLinks?.forEach((gigLink) => gigLink.removeEventListener('click', (e) => this.itemClick(e)))
		}
	}

	customElements.define('gigs-menu', GigsMenu, { extends: 'ul' })
</script>

---
/**
 * Menu of all gigs on the website, sorted by date and month.
 *
 * It responds to shuffle events to filter its items.
 *
 * Props:
 *  selected (optional): it will show the artists under that gig.
 */
import { loadAndFormatCollection, sortGigs } from 'src/util/collection.ts'
import { gigLink, yearLink, monthLink, yearsMenuWrapper } from './GigsMenu.css'
import { makeHash } from 'src/util/names'
import DropdownMenu from '../DropdownMenu'
import { theme } from '../../ThemeContract.css'
import { MenuLi } from '../Menu.css'
import { MenuWrapper } from '../Menu.css'
import ArtistsMenu from './ArtistsMenu.astro'
import { artistsToString } from 'src/util/helpers'

interface Props {
	selected?: string
}

const gigs = await loadAndFormatCollection('gig')
const sortedGigs = sortGigs(gigs)

const { selected } = Astro.props
---

<DropdownMenu
	list={Object.entries(sortedGigs)
		.reverse()
		.map(([yearName, yearObj]) => ({
			hash: makeHash(yearName),
			title: yearName,
			subtitle: `(${yearObj.count})`
		}))}
	direction="down"
	backgroundColor="white" 
	textColor="black"
	heightMobile={theme.dimensions.headerHeightMobile}
	top={'0px'}
	client:load
/>

<ul is="gigs-menu" data-selected={selected} class={`${yearsMenuWrapper} yearList`} style={{ overflow: 'clip' }}>
	{
		Object.entries(sortedGigs)
			.reverse()
			.map(([yearName, yearObj]) => (
				<li class={MenuLi['vertical']} id={makeHash(yearName)}>
					<a class={yearLink}>
						{yearName} {`(${yearObj.count})`}
					</a>
					<ul class={`${MenuWrapper['vertical']} monthList`}>
						{Object.entries(yearObj.gigs).map(([monthName, gigs]) => (
							<li class={`${MenuLi['vertical']} monthItem`}>
								<a class={monthLink}>{monthName}</a>
								<ul class={`${MenuWrapper['vertical']} gigList`}>
									{gigs.map((gig) => (
										<li
											class={`${MenuLi['vertical']} gigItem filter-item ${gig.entry.id === selected ? 'active' : ''}`}
											data-gig={makeHash(gig.entry.id)}
											data-searchable={`${gig.entry.data.venue}${artistsToString(gig.extra.artists)}`}
										>
											<a class={gigLink} href={!selected ? `#${makeHash(gig.entry.id)}` : gig.extra.absolutePath}>
												{gig.entry.data.title}
											</a>
											{gig.entry.id === selected && <ArtistsMenu artists={gig.extra.artists} transition:persist />}
										</li>
									))}
								</ul>
							</li>
						))}
					</ul>
				</li>
			))
	}
</ul>

<slot />

<script>
	import { maintainSidebarScrollPosition } from 'src/util/helpers'
	import type { SidebarWrapper } from '../SidebarNav.astro.0.mts'

	maintainSidebarScrollPosition('gig')

	/**
	 * A menu of gigs.
	 *
	 * Similar to EntryMenu.astro but with subcategories for year/month.
	 */
	class GigsMenu extends HTMLUListElement {
		sidebar: SidebarWrapper | null
		gigLinks: NodeListOf<HTMLElement> | null
		artistsMenu: HTMLElement | null
		selected: string | null

		constructor() {
			super()
			this.sidebar = document.querySelector<SidebarWrapper>('sidebar-wrapper')
			this.gigLinks = this.querySelectorAll('[data-gig]')
			this.artistsMenu = this.querySelector('artists-menu')
			this.selected = this.getAttribute('data-selected')
		}

		itemClick(e: MouseEvent) {
			// Close sidebar on mobile
			// See: SidebarNav.astro
			this.sidebar?.toggleSidebar()
			if (!this.gigLinks) return
			// Find where the gig appears in the menu
			const target = e.currentTarget as HTMLElement
			const index = Array.from(this.gigLinks).indexOf(target)
			// Scroll to it in the virtualized list
			// See ReactWindow.tsx
			// @ts-ignore
			window.scrollToItem && window.scrollToItem(0, index)
		}

		/**
		 * Respond to react-window filter events and hide gigs/years/months.
		 * @param e
		 */
		onFilter = (e: any) => {
			const items = e.detail.items as HTMLElement[] | null
			const filteredItems = e.detail.filteredItems as HTMLElement[] | null

			// Hide the artists menu if we're shuffling
			if (filteredItems?.length !== items?.length && this.selected) {
				this.artistsMenu?.classList.add('hidden')
			} else {
				this.artistsMenu?.classList.remove('hidden')
			}

			items?.forEach((item) => {
				const gigId = item.dataset.gig

				const sidebarItem = this.querySelector(`[data-gig="${gigId}"]`)

				const gigList = sidebarItem?.closest('.gigList')
				if (!gigList) return

				const monthList = gigList.closest('.monthList')
				if (!monthList) return

				// Hide items filtered out by shuffle if they arent alreaedy
				if (!filteredItems?.includes(item)) {
					sidebarItem?.classList.add('hidden')
				} else {
					sidebarItem?.classList.remove('hidden')
				}

				// Hide months without any visible gigs
				const gigsInGroup = gigList.childElementCount
				const hiddenGigsInGroup = gigList.querySelectorAll('.gigItem.hidden').length

				if (gigsInGroup === hiddenGigsInGroup) {
					gigList.parentElement?.classList.add('hidden')
				} else {
					gigList.parentElement?.classList.remove('hidden')
				}

				// Hide years without any visible months
				const monthsInYear = monthList.childElementCount
				const hiddenMonthsInYear = monthList.querySelectorAll('.monthItem.hidden').length

				if (monthsInYear === hiddenMonthsInYear) {
					monthList.parentElement?.classList.add('hidden')
				} else {
					monthList.parentElement?.classList.remove('hidden')
				}
			})
		}

		connectedCallback() {
			window.addEventListener('react-window-filter', this.onFilter, false)
			!this.selected && this.gigLinks?.forEach((gigLink) => gigLink.addEventListener('click', (e) => this.itemClick(e)))
		}

		disconnectedCallback() {
			window.removeEventListener('react-window-filter', this.onFilter, false)
			!this.selected &&
				this.gigLinks?.forEach((gigLink) => gigLink.removeEventListener('click', (e) => this.itemClick(e)))
		}
	}

	customElements.define('gigs-menu', GigsMenu, { extends: 'ul' })
</script>

---
/**
 * Displays all the images and videos for each artist in a gig.
 */
import type { ProcessedEntry } from 'src/util/collection'
import Divider from '../Divider'
import ImageGallery from '../ImageGallery.astro'
import ImageGalleryLightbox from '../ImageGalleryLightbox'
import FlexGridContainer from '../FlexGridContainer.astro'
import LiteYoutube from '../LiteYoutube.astro'

interface Props {
	entry: ProcessedEntry<'gig'>
}

const { entry } = Astro.props
const entryExtra = entry.extra
const entryData = entry.entry.data

// For the lightbox
const allImages = Object.values(entryExtra.artistImages).reduce((acc, images) => {
	return [...acc, ...images]
}, [])

/**
 * We have multiple galleries, and one lightbox.
 * So we need a way for the galleries to know the index of their images
 * in relation to the totality of images which the lightbox has.
 */
const getGalleryOffset = (entryExtra: any, i: any) => {
	if (i === 0) return 0
	const prevArtistId = entryExtra.artists[i - 1].id
	return entryExtra.artistImages[prevArtistId].length
}
---

{
	entryExtra.artists.map((artist, i) => (
		<div class="artist" id={artist.id}>
			<Divider href={`#${artist.id}`} color="black" backgroundColor="white" sticky={true}>
				{artist.data.title}
			</Divider>
			<FlexGridContainer grid={{ xs: 12, md: 6 }} maxWidth="1080px">
				{entryData.artists[i].vid?.map((vid, i) => (
					<LiteYoutube videoid={vid.link} />
				))}
			</FlexGridContainer>
			{entryExtra.artistImages[artist.id] && (
				<ImageGallery
					noLightbox={true}
					images={entryExtra.artistImages[artist.id]}
					galleryOffset={getGalleryOffset(entryExtra, i)}
				/>
			)}
		</div>
	))
}

<ImageGalleryLightbox title={entryData.title} images={allImages} client:load />

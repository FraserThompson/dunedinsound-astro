---
/**
 * Displays gigs in chronological order with a sidebar for navigation.
 */
import SidebarNav from 'src/components/SidebarNav.astro'
import GigsMenu from 'src/components/gig/GigsMenu.astro'
import FlexGridContainer from 'src/components/FlexGridContainer.astro'
import { type ProcessedEntry } from 'src/util/collection'
import { theme } from 'src/Theme.css'
import GigTile from 'src/components/gig/GigTile.astro'

interface Props {
	gigs: ProcessedEntry<'gig'>[]
}

const { gigs } = Astro.props
---

<SidebarNav top={theme.dimensions.headerHeight}>
	<GigsMenu slot="sidebarMenu" />
	<FlexGridContainer grid={{ xs: 12,  }} id="gigs" slot="content" fixedWidth={true}>
		{gigs.map((gig) => <GigTile gig={gig} />)}
	</FlexGridContainer>
</SidebarNav>

<script>
	import { elementIsVisibleInViewport } from 'src/util/helpers.ts'

	const gigs = document.querySelectorAll('.tile')

	const sidebar = document.querySelector('#sidebar')

	const options = {
		rootMargin: '-80px 0px -99%'
	}

	/**
	 * Highlights gig in the sidebar when its scrolled over on the main page.
	 */
	const callback = (entries: IntersectionObserverEntry[]) => {
		entries.forEach((entry) => {
			const sidebarItem = sidebar?.querySelector(`[href="#${entry.target.id}"]`)
			const monthGroup = sidebarItem?.parentElement?.parentElement

			if (entry.isIntersecting) {
				sidebarItem?.classList.add('active')
				if (sidebar && sidebarItem && !elementIsVisibleInViewport(sidebarItem)) {
					// @ts-ignore
					//sidebar.scrollTop = monthGroup?.offsetTop
				}
			} else {
				sidebarItem?.classList.remove('active')
			}
		})
	}

	const observer = new IntersectionObserver(callback, options)
	gigs.forEach((el) => observer.observe(el))
</script>

---
/*
	Image component for displaying responsive images via a srcset.
	Also will allow the image to be opened in a lightbox (not included).

	Props:
	 - responsiveImage: the ResponsiveImage to display
	 - className (optional): classname
	 - image (optional): a regular image src to use instead of a responsive image
	 - lightboxEnabled (optional): if true images can be opened in a lightbox.
	    For this to work there needs to be an <ImageGalleryLightbox/> component on the page.
	 - imageIndex (optional): the index of the image in the array given to the lightbox.
	    If not supplied it will assume the image array to the lightbox is the same order
			as images on the page.
	 - alt (optional) : alt text
	 - size (optional): specifies how it will be displayed, so the browser
		  can select the optional image. Defaults to a grid.
	 - loading (optional): how to load. defaults to lazy.
*/

import type { ResponsiveImage } from 'src/util/ResponsiveImage'
import { ImageStyle, ImageWrapper } from './Image2.css'
import { assignInlineVars } from '@vanilla-extract/dynamic'

export type ResponsiveImageSizes = {
	full: string
	textContainer: string
	grid: string
	smallGrid: string
	largeGrid: string
}

export interface Props {
	responsiveImage?: ResponsiveImage
	className?: string
	image?: string
	objectFit?: string
	lightboxEnabled?: boolean
	alt?: string
	size?: keyof ResponsiveImageSizes
	loading?: 'lazy' | 'eager'
}

const {
	responsiveImage,
	image,
	objectFit = 'cover',
	alt,
	className = '',
	size = 'grid',
	loading = 'lazy'
} = Astro.props

const sizes: ResponsiveImageSizes = {
	full: '50vw',
	textContainer: `
				(min-width: 768px) 740px,
				50vw
				`,
	grid: `
					(min-width: 1600px) 25vw,
					(min-width: 992px) 33vw,
					(min-width: 768px) 50vw, 
					25vw
					`,
	smallGrid: `
					(min-width: 1600px) 12vw,
					(min-width: 992px) 16vw,
					(min-width: 768px) 25vw, 
					25vw
					`,
	largeGrid: `
					(min-width: 1600px) 33vw,
					(min-width: 992px) 33vw,
					(min-width: 768px) 50vw, 
					100vw
					`
}
---

<div class={`${ImageWrapper} ${className}`}>
	<picture>
		<source type="image/webp" srcset={responsiveImage && responsiveImage.srcset} sizes={sizes[size]} />
		<img
			class={ImageStyle}
			src={responsiveImage ? responsiveImage.images[0] : image}
			srcset={responsiveImage && responsiveImage.srcset}
			sizes={sizes[size]}
			alt={responsiveImage?.alt || alt}
			loading={loading}
			decoding="async"
			style={assignInlineVars({ objectFit })}
		/>
	</picture>
</div>

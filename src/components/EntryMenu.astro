---
/**
 * A menu displaying all entries of a certain type.
 * Used on content by entry pages to aid navigation.
 *
 * Props:
 *  - collection: the collection to display entries from.
 *  - entries (optional): OR the already loaded entries to display.
 *  - selected: the current entry. Will highlight it if supplied.
 */
import { loadAndFormatCollection, type ProcessedEntry } from 'src/util/collection'
import { MenuLi, MenuLinkWrapper, MenuWrapper } from 'src/components/Menu.css'
import { backButton } from 'src/components/gig/GigsMenu.css'
import type { CollectionKey } from 'astro:content'
import ChevronLeftIcon from '~icons/iconoir/nav-arrow-left'
import { theme } from '../ThemeContract.css'
import AllAgesIndicator from './AllAgesIndicator.astro'
import SeriesIndicator from './SeriesIndicator.astro'

interface Props {
	style?: Partial<CSSStyleDeclaration>
	collection?: CollectionKey
	collectionEntries?: ProcessedEntry<CollectionKey>[]
	selected?: string
}

const { selected, collection, collectionEntries, style } = Astro.props

// Helpers for conciseness
const isDied = (entry) => 'died' in entry.entry.data && entry.entry.data.died !== undefined
const isAllAges = (entry) => 'allAges' in entry.entry.data && entry.entry.data.allAges

const entries = collection ? await loadAndFormatCollection(collection) : collectionEntries
---

{
	selected && (
		<a class={`showMobile flex ${backButton}`} href={`/${collection}s`}>
			<ChevronLeftIcon /> Go to {collection === 'blog' ? 'article' : collection}s home
		</a>
	)
}

<ul class={`${MenuWrapper['vertical']}`} style={style}>
	{
		entries
			?.sort((a, b) => (a.entry.id < b.entry.id ? -1 : 1))
			?.map((entry) => (
				<li
					data-category={`${isDied(entry) ? 'dead' : 'active'},${isAllAges(entry) ? 'allages' : ''}`}
					class={`filter-item ${MenuLi['vertical']} ${entry.entry.id === selected ? 'active' : ''}`}
				>
					<a
						class={MenuLinkWrapper['vertical']}
						style={{
							color: isDied(entry) ? 'rgb(150, 150, 150)' : ''
						}}
						data-markerkey={
							'lng' in entry.entry.data &&
							'lat' in entry.entry.data &&
							`LngLat(${entry.entry.data.lng}, ${entry.entry.data.lat})`
						}
						data-date={'date' in entry.entry.data ? entry.entry.data.date?.getTime() : undefined}
						href={selected ? entry.extra.absolutePath : undefined}
					>
						{entry.entry.data.title}
						{'allAges' in entry.entry.data && <AllAgesIndicator hideText={true} />}
						{'series' in entry.entry.data && <SeriesIndicator hideText={true} />}
						{'gigCount' in entry.extra && (
							<small
								title="Gig Count"
								style={{
									color: theme.color.dullText,
									width: '1.2em',
									display: 'inline-block',
									float: 'right',
									textAlign: 'right'
								}}
							>
								{entry.extra.gigCount}
							</small>
						)}
					</a>
				</li>
			))
	}
</ul>

<script>
	import { maintainSidebarScrollPosition } from 'src/util/helpers'
	const collection = window.location.pathname.split('/')[1]
	maintainSidebarScrollPosition(collection)
</script>

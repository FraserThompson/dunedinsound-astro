---
/**
 * A clickable tile used for displaying a link to content in a cool way.
 *
 * Props:
 *  - href: the link
 *  - image (optional): the background image
 *  - responsiveImage (optional): the background image (responsive)
 *  - backgroundStyle (optional): by default the background image is centered.
 *    Pass full to make it span the entire tile.
 *  - title (optional): displayed at the top
 *  - label (optional): displayed at the bottom
 *  - subtitle (optional): displayed under the title
 *  - dataAttributes (optional): data-whatever attributes to add
 *  - responsiveImageSizes (optional): indicates how the srcSet should be displayed.
 *  - backgroundColor (optional)
 *  - containerHeight (optional)
 *  - containerWidth (optional)
 *  - className (optional)
 *  - id (optional)
 *
 */
import BackgroundImage from './BackgroundImage.astro'
import type { ResponsiveImage } from 'src/util/ResponsiveImage'
import type { ResponsiveImageSizes } from 'src/components/Image2.astro'
import {
	tileWrapper,
	tileInner,
	titleWrapper,
	tileContent,
	tileTitle,
	background,
	centerImageWrapper,
	height,
	heightMobile,
	width,
	tileSubtitle
} from './Tile.css'
import { assignInlineVars } from '@vanilla-extract/dynamic'
import Image2 from 'src/components/Image2.astro'
import CornerLabel from './gig/CornerLabel.astro'

export type BackgroundStyle = 'full' | 'center'

interface Props {
	href: string
	image?: string
	responsiveImage?: ResponsiveImage
	backgroundStyle?: BackgroundStyle
	title?: string
	label?: string
	subtitle?: string
	dataAttributes?: any
	responsiveImageSizes?: keyof ResponsiveImageSizes
	backgroundColor?: string
	containerHeight?: string
	containerHeightMobile?: string
	containerWidth?: string
	className?: string
	id?: string
}

const {
	href,
	className = '',
	id = '',
	image,
	responsiveImage,
	title,
	subtitle,
	label,
	backgroundColor,
	containerHeight,
	containerHeightMobile,
	containerWidth,
	dataAttributes,
	backgroundStyle = 'center',
	responsiveImageSizes
} = Astro.props
---

<div
	{...dataAttributes}
	class={`${tileWrapper[containerWidth ? 'fixedWidth' : 'noWidth']} ${className} tile`}
	style={assignInlineVars({
		[height]: containerHeight,
		[heightMobile]: containerHeightMobile
	})}
	id={id}
>
	<div
		class={tileInner}
		style={assignInlineVars({
			[background]: backgroundColor,
			[height]: containerHeight,
			[heightMobile]: containerHeightMobile,
			[width]: containerWidth
		})}
	>
		<a href={href} title={title}>
			{
				responsiveImage && backgroundStyle == 'full' && (
					<BackgroundImage responsiveImageSizes={responsiveImageSizes} responsiveImage={responsiveImage} />
				)
			}
			{
				responsiveImage && backgroundStyle == 'center' && (
					<div class={centerImageWrapper}>
						<Image2 size={responsiveImageSizes} responsiveImage={responsiveImage} />
					</div>
				)
			}
			{
				image && (
					<div class={centerImageWrapper} style={{ maxWidth: '100px' }}>
						<Image2 image={image} />
					</div>
				)
			}
			<div class={titleWrapper}>
				<div class={tileContent}>
					{
						label && (
							<CornerLabel position="left" top="0px">
								{label}
							</CornerLabel>
						)
					}
					{title && <h4 class={tileTitle}>{title}</h4>}
					{subtitle && <h5 class={tileSubtitle}>{subtitle}</h5>}
					<div style={{ marginTop: 'auto' }}>
						<slot />
					</div>
				</div>
			</div>
		</a>
	</div>
</div>

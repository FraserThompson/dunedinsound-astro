---
/**
 * Encapsulates the filter and sort elements for Shuffle.js
 *
 * To use this component, create filter child elements inside it.
 *
 * This component's props:
 *  - data-boardselector: selector for the shuffle board (default: #shuffle)
 *  - data itemselector: selector for the board items (default: .tile)
 *
 * Sort elements need:
 *  - data-sortby: name of the data attribute it should sort by.
 *  - data-reversesort (optional): sort in reverse order
 *
 * Filter elements need:
 *  - data-filter: the filter to filter by in the x=y format. Eg title=banana.
 *    If y is literally "value", it will instead check againsts the elements value.
 *  - Note: text filters do a partial text search
 *
 * An event is emitted to document on filter. Listen for shuffle-filter.
 */

import { shuffleFilter } from './ShuffleFilters.css'

interface Props {
	itemselector?: string
	boardselector?: string
	className?: string
}

const { itemselector, boardselector, className = '' } = Astro.props
---

<shuffle-filters
	data-itemselector={itemselector}
	data-boardselector={boardselector}
	class={`${shuffleFilter} ${className}`}
>
	<slot />
</shuffle-filters>

<script>
	import Shuffle from 'shufflejs'
	import { stringNormalize } from 'src/util/names'

	class ShuffleFilters extends HTMLElement {
		shuffleInstance: Shuffle | null

		// Buttons which sort the items.
		sortButtons: NodeListOf<HTMLElement> | null

		// Elements which filter the items (eg. search)
		filterElements: NodeListOf<HTMLInputElement> | null

		// Active sort mode.
		activeSort: HTMLElement | null

		// List of active filters.
		activeFilters: Set<HTMLInputElement> | null

		constructor() {
			super()

			this.sortButtons = this.querySelectorAll('[data-sortby]')
			this.filterElements = this.querySelectorAll('[data-filter]')

			this.activeSort = this.sortButtons[0]
			this.activeSort?.classList.add('active')
			this.activeFilters = new Set()

			const itemSelector = this.getAttribute('data-itemselector') || '.tile'
			const boardSelector = this.getAttribute('data-boardselector') || '#shuffle'
			const shuffleBoard = document.querySelector<HTMLElement>(boardSelector)

			this.shuffleInstance =
				shuffleBoard &&
				new Shuffle(shuffleBoard, {
					itemSelector,
					delimiter: ','
				})
		}

		/**
		 * Filters the shuffleboard based on currently active filters.
		 * @param el
		 */
		private shuffleFilter(el: HTMLElement) {
			// No active filters? Show everything
			if (this.activeFilters?.size === 0) return true

			const filterResult: boolean[] = []

			this.activeFilters?.forEach((filter) => {
				const filterBy = filter.getAttribute('data-filter')
				if (!filterBy) return

				const [attr, val] = filterBy.split('=')

				// Check the value of the filter element
				if (val && val == 'value') {
					if (filter.getAttribute('type') === 'search') {
						const filterValue = stringNormalize(filter.value)
						filterResult.push(stringNormalize(el.getAttribute(`data-${attr}`)).includes(filterValue))
					} else {
						const filterValue = filter.value
						filterResult.push(el.getAttribute(`data-${attr}`) == filterValue)
					}
				}
				// Static conditional
				else if (attr && val) {
					filterResult.push(el.getAttribute(`data-${attr}`) == val)
				}
			})

			// Test all active filters and if any are true, return true
			return filterResult.every((result) => result === true)
		}

		/**
		 * Handler for the sort buttons being clicked.
		 */
		public sortButtonHandler(e: MouseEvent) {
			if (!(e.target instanceof HTMLButtonElement)) return

			const activeSort = e.target
			const reversesort = activeSort.getAttribute('data-reversesort')
			const sortby = activeSort.getAttribute('data-sortby')

			activeSort.classList.add('active')
			this.activeSort?.classList.remove('active')
			this.activeSort = activeSort

			this.shuffleInstance?.sort({
				reverse: reversesort ? true : false,
				by: (el) => {
					const param = el.getAttribute(`data-${sortby}`)?.toLowerCase()
					const intParam = param && parseInt(param)
					// @ts-ignore
					return intParam && intParam !== '' ? intParam : param
				}
			})
		}

		/**
		 * Handler for the filter elements changing.
		 */
		public filterElementHandler(e: any) {
			const filter = e.target
			const type = e.target.type

			let isActive = false

			// Whether the filter is active varies on the type
			switch (type) {
				case 'search':
					// Text filters are active when there is text
					isActive = filter.value.length !== 0
					break
				case 'select-one':
					// Select filters are active when the value isnt default (all)
					isActive = filter.value !== 'all'
					break
				default:
					// Otherwise it acts as a toggle
					isActive = !this.activeFilters?.has(filter)
			}

			if (isActive) {
				this.activeFilters?.add(filter)
			} else {
				this.activeFilters?.delete(filter)
			}

			this.shuffleInstance?.filter((el) => this.shuffleFilter(el))

			// Scroll to top so results aren't lost
			if (type === 'search') {
				const sidebar = document.querySelector('#sidebar-menu')
				if (sidebar) {
					sidebar.scroll(0, 0)
				}
				window.scroll(0, 0)
			}

			// Let other components know what's up
			const event = new CustomEvent('shuffle-filter', { detail: this.shuffleInstance })
			document.dispatchEvent(event)
		}

		connectedCallback() {
			// Sort button listeners
			this.sortButtons?.forEach((button) => {
				button.addEventListener('mousedown', (e: MouseEvent) => this.sortButtonHandler(e))
			})

			// Filter element listeners
			this.filterElements?.forEach((el) => {
				const event = el.getAttribute('type') === 'search' ? 'input' : 'change'
				el.addEventListener(event, (e: any) => this.filterElementHandler(e))
			})
		}

		disconnectedCallback() {
			this.shuffleInstance?.destroy()
		}
	}

	customElements.define('shuffle-filters', ShuffleFilters)
</script>

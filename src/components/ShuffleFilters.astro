---
/**
 * Encapsulates filter, sort, and search functionality for elements on the page.
 *
 * To use give the items you want to be filterable the class 'filter-item'.
 *
 * Other components can listen for the 'react-window-filter' event to respond when
 * this component filters stuff (same as ReactWindow.tsx)
 *
 * Props:
 *  - search: Supply a placeholder string to enable searching of the text inside elements. (optional)
 *    (additional searchable text can be defined with data-searchable on elements)
 *  - sort: Array of Sorters (optional)
 *  - filter: Array of Filters (optional)
 *  - className: Class to add to the wrapper (optional)
 *  - openSearchWithSidebar: Whether to only show search when the sidebar is open (optional)
 */

import { shuffleFilter } from './ShuffleFilters.css'
import { searchboxWrapper } from './SearchBox.css'
import SortIcon from '~icons/iconoir/sort'
import SearchIcon from '~icons/iconoir/search'

export interface Sorter {
	value: string
	order: string
	title: string
}

export interface Filter {
	value?: string
	values?: string[][]
	title: string
	checkedTitle?: string
	icon?: string
	type: 'select' | 'checkbox'
}

interface Props {
	openSearchWithSidebar?: boolean
	className?: string
	search?: string
	sort?: Sorter[]
	filter?: Filter[]
}

const { openSearchWithSidebar, search, sort, filter, className = '' } = Astro.props
---

<shuffle-filters class={`${shuffleFilter} ${className}`}>
	{
		search && (
			<label class={`${searchboxWrapper} fixedBottomMobile flex ${openSearchWithSidebar ? 'openWithSidebar' : ''}`}>
				<SearchIcon class="hideMobile" />
				<input type="search" placeholder={search} />
			</label>
		)
	}
	{
		sort && (
			<label>
				<SortIcon aria-label="Sort by" />
				<select data-sort>
					{sort.map((sort) => (
						<option value={sort.value} data-order={sort.order}>
							{sort.title}
						</option>
					))}
				</select>
			</label>
		)
	}
	{
		filter?.map((filter) =>
			filter.type !== 'select' ? (
				<label>
					<input name={filter.value} value={filter.value} type={filter.type} />
					{filter.title}
				</label>
			) : (
				<label class="flex">
					{filter.title}
					<select name={filter.title} data-filter>
						<option value="">All</option>
						{filter.values?.map(([title, value]) => (
							<option value={value}>{title}</option>
						))}
					</select>
				</label>
			)
		)
	}
</shuffle-filters>

<script>
	class ShuffleFilters extends HTMLElement {
		htmlElements: HTMLElement[]
		filteredElements: HTMLElement[]
		sidebar: HTMLElement | null

		searchValue: string

		sortValue: string
		sortOrder: number

		filters: string[]
		selectFilters: {}

		searchElement: HTMLElement | null
		selectFilterElements: NodeListOf<HTMLElement> | null
		checkboxFilterElements: NodeListOf<HTMLElement> | null
		sortElement: HTMLElement | null

		constructor() {
			super()

			const itemSelector = '.filter-item'

			this.htmlElements = Array.from(document.querySelectorAll(itemSelector))
			this.sidebar = document.querySelector('#sidebar')

			this.filters = []
			this.filteredElements = []
			this.selectFilters = {}

			this.searchValue = ''
			this.sortValue = ''
			this.sortOrder = 1

			this.searchElement = this.querySelector('input[type=search]')
			this.selectFilterElements = this.querySelectorAll('select[data-filter]')
			this.checkboxFilterElements = this.querySelectorAll('input[type=checkbox]')
			this.sortElement = this.querySelector('select[data-sort]')
		}

		// Combines the results of all filters and determines whether an item should be filtered
		filterItem = (item: HTMLElement) => {
			const lowerSearch = this.searchValue.toLowerCase()
			const elementSearchableText = `${item.innerText}${item.dataset.searchable || ''}`
			const searchResult = elementSearchableText.toLowerCase().includes(lowerSearch)
			const itemCategories = item.dataset.category?.split(',')
			const combinedFilters = [...this.filters, ...Object.values(this.selectFilters)] as string[]
			const filterResult =
				combinedFilters.length > 0
					? combinedFilters.every((filter) => itemCategories && itemCategories.includes(filter))
					: true

			const visible = searchResult && filterResult

			if (visible) {
				item.classList.remove('hidden')
			} else {
				item.classList.add('hidden')
			}

			return visible
		}

		// Toggle a checkbox filter on and off
		toggleFilter = (value: string) => {
			if (this.filters.includes(value)) {
				this.filters = this.filters.filter((currentFilter) => currentFilter !== value)
			} else {
				this.filters = [...this.filters, value]
			}
		}

		// Set a select filter
		selectFilter = (title: string, value: string) => {
			const newFilters = { ...this.selectFilters }
			if (!value) {
				delete newFilters[title]
			} else {
				newFilters[title] = value
			}
			this.selectFilters = newFilters
		}

		// Filter and sort items based on current filters and sorts
		filterItems = () => {
			const filtered = this.htmlElements.filter((item) => this.filterItem(item))

			// Scroll to top on filtering
			this.sidebar?.scrollTo(0, 0)

			if (this.sortValue) {
				this.filteredElements = filtered.sort((a, b) => {
					const sortA = a.dataset[this.sortValue] || ''
					const sortB = b.dataset[this.sortValue] || ''
					const aNumber = parseInt(sortA)
					const bNumber = parseInt(sortB)

					if (typeof aNumber === 'number') {
						return (aNumber - bNumber) * this.sortOrder
					} else {
						return sortA.localeCompare(sortB)
					}
				})
			} else {
				this.filteredElements = filtered
			}

			this.onChange()
		}

		// When anything changes let everyone know
		onChange = () => {
			const event = new CustomEvent('react-window-filter', {
				detail: {
					items: this.htmlElements,
					filteredItems: this.filteredElements
				}
			})
			window.dispatchEvent(event)
		}

		onSearch = (e) => {
			const target = e.currentTarget
			this.searchValue = target.value
			this.filterItems()
		}

		onSelectFilter = (e) => {
			const target = e.currentTarget
			this.selectFilter(target.title, target.value)
			this.filterItems()
		}

		onCheckboxFilter = (e) => {
			const target = e.currentTarget
			this.toggleFilter(target.value)
			this.filterItems()
		}

		onSort = (e) => {
			const target = e.currentTarget
			this.sortValue = target.value
			this.sortOrder = target.dataset.order === 'asc' ? 1 : -1
			this.filterItems()
		}

		connectedCallback() {
			// attach callbacks for search, sort, filter elements
			this.searchElement?.addEventListener('input', this.onSearch)
			this.selectFilterElements &&
				Array.from(this.selectFilterElements).map((el) => el?.addEventListener('select', this.onSelectFilter))
			this.checkboxFilterElements &&
				Array.from(this.checkboxFilterElements).map((el) => el?.addEventListener('input', this.onCheckboxFilter))
			this.sortElement?.addEventListener('select', this.onSort)
		}

		disconnectedCallback() {
			// detach callbacks for search, sort, filter elements
			this.searchElement?.removeEventListener('input', this.onSearch)
			this.selectFilterElements &&
				Array.from(this.selectFilterElements).map((el) => el?.removeEventListener('select', this.onSelectFilter))
			this.checkboxFilterElements &&
				Array.from(this.checkboxFilterElements).map((el) => el?.removeEventListener('input', this.onCheckboxFilter))
			this.sortElement?.removeEventListener('select', this.onSort)
		}
	}

	customElements.define('shuffle-filters', ShuffleFilters)
</script>

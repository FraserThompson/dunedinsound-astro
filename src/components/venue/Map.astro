---
/**
 * Encapsulates a mapbox map.
 *
 * markers: Array of {coords: [lat, lng], class?: 'classname'} to display as markers on the map.
 *
 * Popups (optional):
 *  For popups add elements of class "popup" to the "popups" slot.
 *  There must be one popup for each marker.
 *
 * Sidebar (optional):
 *  For a sidebar with menu links that select markers on the map, add a sidebar to the page.
 *  Each menu item should have
 *   data-markerindex: The index of the corresponding map marker.
 *  The menu must have the same items as the map has markers.
 *
 * This will also respond to a shuffle-filter on the page and remove markers based on index.
 */

import 'mapbox-gl/dist/mapbox-gl.css'
import { MapWrapperStyle, mapHeight, mapHeightMobile } from './Map.css'
import { assignInlineVars } from '@vanilla-extract/dynamic'

interface Marker {
	coords: number[]
	class?: string
}

interface Props {
	markers: Marker[]
	zoom?: string
	center?: number[]
	height?: string
	heightMobile?: string
	nointeract?: boolean
}

const { markers, zoom, center, height, heightMobile, nointeract } = Astro.props
---

<map-wrapper
	data-markers={JSON.stringify(markers)}
	data-center={JSON.stringify(center)}
	data-nointeract={nointeract ? 'true' : undefined}
	data-zoom={zoom}
	style={{ position: 'relative', overflow: 'hidden' }}
>
	<div
		id="map"
		class={MapWrapperStyle}
		style={assignInlineVars({
			[mapHeight]: height,
			[mapHeightMobile]: heightMobile
		})}
	>
	</div>
	<div style={{ display: 'none' }}>
		<slot name="popups" />
	</div>
</map-wrapper>

<script>
	import mapboxgl from 'mapbox-gl'
	import type Shuffle from 'shufflejs'

	class MapWrapper extends HTMLElement {
		map: mapboxgl.Map
		markers: mapboxgl.Marker[]
		sidebar: Element | null
		sidebarLinks: NodeListOf<HTMLAnchorElement> | undefined
		selectedMarker: mapboxgl.Marker | undefined
		selectedSidebar: HTMLElement | undefined

		constructor() {
			super()

			mapboxgl.accessToken =
				'pk.eyJ1IjoiZnJhc2VydGhvbXBzb24iLCJhIjoiY2llcnF2ZXlhMDF0cncwa21yY2tyZjB5aCJ9.iVxJbdbZiWVfHItWtZfKPQ'

			const centerAttrib = this.getAttribute('data-center')
			const center = centerAttrib ? JSON.parse(centerAttrib) : [170.5016047, -45.8745557]
			const zoom = this.getAttribute('data-zoom') || '13'
			const interactive = this.getAttribute('data-nointeract') ? false : true

			this.map = new mapboxgl.Map({
				container: 'map',
				style: 'mapbox://styles/mapbox/dark-v11',
				center: center,
				zoom: parseInt(zoom),
				interactive
			})

			this.markers = []
			this.sidebar = document.querySelector('sidebar-wrapper')
			this.sidebarLinks = this.sidebar?.querySelectorAll('[data-markerindex]')

			const markers = JSON.parse(this.getAttribute('data-markers') || '') as any
			const popups = this.querySelectorAll('.popup')

			for (const [i, markerInfo] of markers.entries()) {
				const popup = popups && popups[i] && new mapboxgl.Popup().setHTML(popups[i].innerHTML).setMaxWidth('300px')

				// @ts-ignore
				popup?.on('open', (e: any) => this.markerClick(e, i))

				let el = undefined
				if (markerInfo.class) {
					el = document.createElement('div')
					el.className = markerInfo.class
				}

				const marker = new mapboxgl.Marker(el).setLngLat(markerInfo.coords).setPopup(popup).addTo(this.map)
				this.markers?.push(marker)
			}
		}

		markerClick(e: any, i: number) {
			if (!this.sidebarLinks) return
			this.selectedSidebar?.classList.remove('active')
			this.selectedSidebar = this.sidebarLinks[i]
			this.selectedSidebar?.classList.add('active')
			this.selectedSidebar?.scrollIntoView({ behavior: 'smooth' })
		}

		sidebarClick(e: MouseEvent) {
			if (!(e.target instanceof HTMLElement)) return

			const index = e.target?.getAttribute('data-markerIndex')

			if (!index) return

			const indexInt = parseInt(index)

			if (!this.markers[indexInt]) return

			this.map.panTo(this.markers[indexInt].getLngLat())

			// Unselect old sidebar item
			this.selectedSidebar?.classList.remove('active')

			// Select new sidebar item
			this.selectedSidebar = e.target
			this.selectedSidebar?.classList.add('active')

			// Close old popup
			this.selectedMarker?.togglePopup()

			// Open new popup
			this.selectedMarker = this.markers[indexInt]
			this.selectedMarker.togglePopup()

			// Close sidebar on mobile
			// See: SidebarNav.astro
			// @ts-ignore
			this.sidebar.toggleSidebar()
		}

		connectedCallback() {
			this.sidebarLinks?.forEach((link) => link.addEventListener('mousedown', (e) => this.sidebarClick(e)))

			// Support for hiding markers on shuffle filter
			document.addEventListener(
				'shuffle-filter',
				(e: any) => {
					const shuffle = e.detail as Shuffle

					// Only hide markers if we have identical number of shuffle items
					if (shuffle.items.length !== this.markers.length) return

					shuffle.items.forEach((item, i) => {
						if (!item.isVisible) {
							this.markers[i].remove()
						} else {
							this.markers[i].addTo(this.map)
						}
					})
				},
				false
			)
		}

		disconnectedCallback() {}
	}

	customElements.define('map-wrapper', MapWrapper)
</script>

<style is:global>
	.mapboxgl-marker svg path {
		fill: black;
	}
	.mapboxgl-popup-content {
		background: black;
	}
</style>

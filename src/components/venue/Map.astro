---
/**
 * Encapsulates a mapbox map.
 *
 * markers: Array of {coords: [lat, lng], class?: 'classname'} to display as markers on the map.
 *
 * Popups (optional):
 *  For popups add elements of class "popup" to the "popups" slot.
 *  There must be one popup for each marker.
 *  Adding dataset-open will make it default to open and be unclosable.
 *
 * Sidebar (optional):
 *  For a sidebar with menu links that select markers on the map, add a sidebar to the page.
 *  Each menu item should have
 *   data-markerkey: The toString'd LatLng in this format - LngLat(lng, lat)
 *
 * This will also respond to a shuffle-filter on the page and remove markers based on index.
 */

import 'mapbox-gl/dist/mapbox-gl.css'
import { MapWrapperStyle, mapHeight, mapHeightMobile } from './Map.css'
import { assignInlineVars } from '@vanilla-extract/dynamic'

interface Marker {
	coords: number[]
	class?: string
}

interface Props {
	markers: Marker[]
	zoom?: string
	center?: number[]
	height?: string
	heightMobile?: string
	nointeract?: boolean
}

const { markers, zoom, center, height, heightMobile, nointeract } = Astro.props
---

<map-wrapper
	data-markers={JSON.stringify(markers)}
	data-center={JSON.stringify(center)}
	data-nointeract={nointeract ? 'true' : undefined}
	data-zoom={zoom}
	style={{ position: 'relative', overflow: 'hidden' }}
>
	<div
		id="map"
		class={MapWrapperStyle}
		style={assignInlineVars({
			[mapHeight]: height,
			[mapHeightMobile]: heightMobile
		})}
	>
	</div>
	<div style={{ display: 'none' }}>
		<slot name="popups" />
	</div>
</map-wrapper>

<script>
	import mapboxgl from 'mapbox-gl'
	import { elementIsVisibleInViewport } from 'src/util/helpers'
	import type { SidebarWrapper } from '../SidebarNav.astro.0.mts'
	// Polyfilled because some mobile browsers seem to implement
	// the spec differently.
	import { scrollIntoView } from 'seamless-scroll-polyfill'

	class MapWrapper extends HTMLElement {
		map: mapboxgl.Map
		markers: mapboxgl.Marker[]
		sidebar: SidebarWrapper | null
		sidebarLinks: NodeListOf<HTMLAnchorElement> | undefined
		selectedMarker: mapboxgl.Marker | undefined
		selectedSidebar: HTMLElement | null | undefined

		constructor() {
			super()

			mapboxgl.accessToken =
				'pk.eyJ1IjoiZnJhc2VydGhvbXBzb24iLCJhIjoiY2llcnF2ZXlhMDF0cncwa21yY2tyZjB5aCJ9.iVxJbdbZiWVfHItWtZfKPQ'

			const centerAttrib = this.getAttribute('data-center')
			const center = centerAttrib ? JSON.parse(centerAttrib) : [170.5016047, -45.8745557]
			const zoom = this.getAttribute('data-zoom') || '13'
			const interactive = this.getAttribute('data-nointeract') ? false : true

			this.map = new mapboxgl.Map({
				container: 'map',
				style: 'mapbox://styles/mapbox/dark-v11',
				center: center,
				zoom: parseInt(zoom),
				interactive
			})

			this.markers = []
			this.sidebar = document.querySelector<SidebarWrapper>('sidebar-wrapper')
			this.sidebarLinks = this.sidebar?.querySelectorAll('[data-markerkey]')

			const markers = JSON.parse(this.getAttribute('data-markers') || '') as any
			const popups: NodeListOf<HTMLElement> = this.querySelectorAll('.popup')

			for (const [i, markerInfo] of markers.entries()) {
				let el
				if (markerInfo.class) {
					el = document.createElement('div')
					el.className = markerInfo.class
				}

				const marker = new mapboxgl.Marker(el).setLngLat(markerInfo.coords)

				const popupEl = popups && popups[i]

				// If we've passed in a popup via the popup slot
				if (popupEl) {
					let popupOptions: mapboxgl.PopupOptions = {}

					// data-open means it will be unclosable
					if (popupEl?.dataset.open) {
						popupOptions.closeButton = false
						popupOptions.closeOnClick = false
					}

					const popup = new mapboxgl.Popup(popupOptions)

					popup.setHTML(popupEl.innerHTML).setMaxWidth('400px')
					popup.on('open', (e) => this.markerClick(e))

					marker.setPopup(popup)
				}

				marker.addTo(this.map)
				this.markers?.push(marker)

				// data-open means the popup starts open
				if (popupEl?.dataset.open) {
					marker?.togglePopup()
				}
			}
		}

		/**
		 * Highlight in sidebar when a marker is clicked.
		 * @param e
		 */
		markerClick(e: any) {
			if (!this.sidebarLinks) return

			const popup = e.target as mapboxgl.Popup
			const markerLatLng = popup.getLngLat()

			this.selectedSidebar?.classList.remove('active')

			const matchingSidebarItems = this.sidebar?.querySelectorAll<HTMLElement>(
				`[data-markerkey='${markerLatLng.toString()}']`
			)

			if (matchingSidebarItems) {
				const sorted = [...matchingSidebarItems].sort(
					(a, b) => parseInt(b.dataset.date || '0') - parseInt(a.dataset.date || '0')
				)
				this.selectedSidebar = sorted[0]
				this.selectedSidebar?.classList.add('active')
				if (this.selectedSidebar && !elementIsVisibleInViewport(this.selectedSidebar, this.sidebar?.menu)) {
					scrollIntoView(this.selectedSidebar, { behavior: 'smooth', block: 'center' })
				}
			}
		}

		/**
		 * Popup marker when sidebar item is clicked.
		 */
		sidebarClick(e: MouseEvent) {
			if (!(e.target instanceof HTMLElement)) return

			const key = e.target?.getAttribute('data-markerkey')

			if (!key) return

			const marker = this.markers.find((marker) => marker.getLngLat().toString() === key)

			if (!marker) return

			this.map.panTo(marker.getLngLat())

			// Unselect old sidebar item
			this.selectedSidebar?.classList.remove('active')

			// Select new sidebar item
			this.selectedSidebar = e.target
			this.selectedSidebar?.classList.add('active')

			// Close old popup
			this.selectedMarker?.togglePopup()

			// Open new popup
			this.selectedMarker = marker
			this.selectedMarker.togglePopup()

			// Close sidebar on mobile
			// See: SidebarNav.astro
			this.sidebar?.toggleSidebar()
		}

		onFilter = (e: any) => {
			const items = e.detail.items as HTMLElement[] | null
			const filteredItems = e.detail.filteredItems as HTMLElement[] | null
			const bounds = new mapboxgl.LngLatBounds()

			items?.forEach((item) => {
				const el = item.querySelector('a')
				const key = el?.dataset.markerkey

				// The index of the marker matching the shuffle item
				const marker = this.markers.findIndex((marker) => marker.getLngLat().toString() == key)

				if (marker === undefined) {
					console.error('No matching marker:')
					console.error(el?.dataset.markerkey)
					return
				}

				if (!filteredItems?.includes(item)) {
					this.markers[marker].remove()
				} else {
					this.markers[marker].addTo(this.map)

					bounds.extend(this.markers[marker].getLngLat())

					// If there's one result open the popup for ease of use (ON DESKTOP)
					if (window.innerWidth > 768) {
						if (filteredItems?.length === 1) {
							!this.markers[marker].getPopup()?.isOpen() && this.markers[marker].togglePopup()
						} else {
							this.markers[marker].getPopup()?.isOpen() && this.markers[marker].togglePopup()
						}
					}
				}
			})

			// Fit the map to the resulting markers
			!bounds.isEmpty() && this.map.fitBounds(bounds, { duration: 500, padding: 10 })
		}

		connectedCallback() {
			this.sidebarLinks?.forEach((link) => link.addEventListener('mousedown', (e) => this.sidebarClick(e)))

			// Support for hiding markers on filter
			window.addEventListener('react-window-filter', this.onFilter, false)
		}

		disconnectedCallback() {
			window.removeEventListener('react-window-filter', this.onFilter, false)
		}
	}

	customElements.define('map-wrapper', MapWrapper)
</script>

<style is:global>
	.mapboxgl-marker svg path {
		fill: black;
	}
	.mapboxgl-popup-content {
		background: black;
		gap: 15px;
		display: flex;
	}
	.mapboxgl-popup-anchor-bottom .mapboxgl-popup-tip,
	.mapboxgl-popup-anchor-bottom-left .mapboxgl-popup-tip,
	.mapboxgl-popup-anchor-bottom-right .mapboxgl-popup-tip {
		border-top-color: black;
	}
	.mapboxgl-popup-anchor-top .mapboxgl-popup-tip,
	.mapboxgl-popup-anchor-top-left .mapboxgl-popup-tip,
	.mapboxgl-popup-anchor-top-right .mapboxgl-popup-tip {
		border-bottom-color: black;
	}
	.mapboxgl-popup-anchor-left .mapboxgl-popup-tip {
		border-right-color: black;
	}
	.mapboxgl-popup-anchor-right .mapboxgl-popup-tip {
		border-left-color: black;
	}
</style>

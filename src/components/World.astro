---
import { assignInlineVars } from '@vanilla-extract/dynamic'
import { WorldWrapper, Surface, worldPerspective } from './World.css'
interface Props {
	perspective?: string
	lights?: string
}

const { perspective, lights = 'off' } = Astro.props
---

<the-room
	class={WorldWrapper}
	style={assignInlineVars({
		[worldPerspective]: perspective
	})}
>
	<div class={`back ${Surface['back']} ${lights}`}>
		<slot name="back" />
	</div>
	<div class={`top ${Surface['top']} ${lights}`}>
		<slot name="top" />
	</div>
	<div class={`left ${Surface['left']} ${lights}`}>
		<slot name="left" />
	</div>
	<div class={`right ${Surface['right']} ${lights}`}>
		<slot name="right" />
	</div>
	<div class={`bottom ${Surface['bottom']} ${lights}`}>
		<slot name="bottom" />
	</div>
	<div>
		<slot />
	</div>
</the-room>

<script>
	class Room extends HTMLElement {
		back: HTMLElement | null
		top: HTMLElement | null
		left: HTMLElement | null
		right: HTMLElement | null
		bottom: HTMLElement | null

		initialBeta = 0
		initialGamma = 0

		tiltX = 0
		tiltY = 0

		constructor() {
			super()

			this.back = this.querySelector('.back')
			this.top = this.querySelector('.top')
			this.left = this.querySelector('.left')
			this.right = this.querySelector('.right')
			this.bottom = this.querySelector('.bottom')
		}

		lerp = (start: number, end: number, amt: number) => (1 - amt) * start + amt * end

		updatePosition = ({ gamma, beta }: any) => {
			if (!this.left || !this.right || !this.back || !this.top || !this.bottom) return

			if (!this.initialBeta) this.initialBeta = beta
			if (!this.initialGamma) this.initialGamma = gamma

			const portrait = window.innerHeight > window.innerWidth

			this.tiltX = this.lerp(this.tiltX, portrait ? gamma * 4 : beta * 4, 0.1)
			this.tiltY = this.lerp(
				this.tiltY,
				portrait ? (beta - this.initialBeta) * 4 : (gamma - this.initialGamma) * 4,
				0.1
			)

			const tiltXDeg = this.tiltX / 10.5
			const tiltYDeg = this.tiltY / 10.5

			this.back.style.transform = `translate3d(${this.tiltX}px, ${this.tiltY}px, -600px)`
			this.top.style.transform = `translateZ(0) rotate3d(1, 0, 0, ${-90 + tiltYDeg}deg) skew(${tiltXDeg}deg)`
			this.bottom.style.transform = `translateZ(0) rotate3d(1, 0, 0, ${90 + tiltYDeg}deg) skew(${-tiltXDeg}deg)`
			this.left.style.transform = `translateZ(0) rotate3d(0, 1, 0, ${90 - tiltXDeg}deg) skew(0, ${tiltYDeg}deg)`
			this.right.style.transform = `translateZ(0) rotate3d(0, 1, 0, ${-90 - tiltXDeg}deg) skew(0, ${-tiltYDeg}deg)`

			if (this.tiltX < 0) {
				this.left.style.boxShadow = `inset 10px 10px 120px 35px rgba(${-this.tiltX},0,${-this.tiltX},0.75)`
			} else {
				this.right.style.boxShadow = `inset 10px 10px 120px 35px rgba(${this.tiltX},0,${this.tiltX},0.75)`
			}
		}

		connectedCallback() {
			if (window.DeviceMotionEvent) window.addEventListener('deviceorientation', this.updatePosition, false)
		}

		disconnectedCallback() {
			window.removeEventListener('deviceorientation', this.updatePosition)
		}
	}

	customElements.define('the-room', Room)
</script>

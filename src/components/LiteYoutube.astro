---
/**
 * Astro wrapper for lite YouTube Component which doesnt immediately load
 * tonnes of Google rubbish. Also uses the YouTube API to grab metadata.
 * 
 * Props:
 *  - videoid: the Id of the video
 *  - loadAPI (optional): If true the API will be loaded
 *  - autoload (optional): If true the video will be loaded on page load
 */
interface Props {
	videoid: string
	loadAPI?: boolean
	autoload?: boolean
}

const { videoid, loadAPI, autoload } = Astro.props
---

<lite-youtube-toucher data-videoid={videoid} data-loadapi={loadAPI ? 'true' : undefined}>
	<lite-youtube
		autoload={autoload ? 'true' : undefined}
		videoid={videoid}
		nocookie={'true'}
		posterquality="hqdefault"
		params="enablejsapi=1&rel=0"></lite-youtube>
</lite-youtube-toucher>

<style is:global>
	lite-youtube-toucher {
		aspect-ratio: 16/9;
	}
</style>

<script>
	import type { LiteYTEmbed } from '@justinribeiro/lite-youtube'

	// Clientside import because of SSR issues with web components
	import('@justinribeiro/lite-youtube')

	// Wraps the element and calls the youtube API to get the video title and autoplay
	class LiteYoutubeToucher extends HTMLElement {
		APIKey = 'AIzaSyBUlBQysAAKfuSmm4Z92VBMAE9lli3zL58'
		liteYoutube: LiteYTEmbed | null
		autoplaySetteruperrer: any | undefined
		autoplayTries = 0
		titleEl: HTMLElement | undefined
		videoid

		constructor() {
			super()

			const shadow = this.attachShadow({ mode: 'closed' })

			// Attach the API script if we want it
			const shouldLoadAPI = this.getAttribute('data-loadapi')

			if (shouldLoadAPI) {
				const script = document.createElement('script')
				script.setAttribute('src', 'https://www.youtube.com/iframe_api')
				shadow.appendChild(script)
			}

			// Add an element for the title
			this.titleEl = document.createElement('h4')
			const style = document.createElement('style')
			style.innerHTML = `
				h4 { 
				  position: absolute;
					left: 10px; 
					margin-top: 10px; 
				}
				:host { 
				  position: relative;
				}
			`
			const slot = document.createElement('slot')
			shadow.appendChild(slot)
			shadow.appendChild(style)
			shadow.appendChild(this.titleEl)

			this.videoid = this.getAttribute('data-videoid')
			this.liteYoutube = this.querySelector('lite-youtube')
		}

		/**
		 * Use the YouTube API to autoplay when the iframe loads.
		 */
		setupAutoplay() {
			const youtubeIframe = this.liteYoutube?.shadowRoot.querySelector('iframe')
			// @ts-ignore
			new YT.Player(youtubeIframe, {
				events: {
					onReady: (e: any) => {
						e.target.setPlaybackQuality('hd720')
						e.target.playVideo()
					}
				}
			})
		}

		/**
		 * Since it can take a sec for the iframe to load in, we attempt autoplay multiple times.
		 * @param e
		 */
		trySetupAutoplay(e: any) {
			// So elements dont respond to other elements events
			if (e.target !== this.liteYoutube) {
				return
			}

			// Consider failed after 20 attempts
			if (this.autoplayTries > 20) {
				this.autoplaySetteruperrer && clearTimeout(this.autoplaySetteruperrer)
				return
			}

			this.autoplayTries = this.autoplayTries + 1

			try {
				this.setupAutoplay()
				this.autoplaySetteruperrer && clearTimeout(this.autoplaySetteruperrer)
			} catch (error) {
				this.autoplaySetteruperrer = setTimeout(() => this.trySetupAutoplay(e), 100)
			}
		}

		/**
		 * Get the thumbnail and title via the YouTube API.
		 */
		async connectedCallback() {
			let response
			try {
				response = await fetch(
					`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${this.videoid}&key=${this.APIKey}`
				)
			} catch (e) {
				return
			}

			const data = await response.json()

			if (data.items && data.items.length) {
				const title = data.items[0].snippet.title
				const thumbnail = data.items[0].snippet.thumbnails.maxres
					? data.items[0].snippet.thumbnails.maxres.url
					: data.items[0].snippet.thumbnails.high.url

				if (this.titleEl && title) {
					this.titleEl.innerHTML = title
				}

				// The thumbnail from the API will be used if the element itself failed for some reason.
				const fallbackPlaceholder = this.liteYoutube?.querySelector<HTMLImageElement>('img#fallbackPlaceholder')
				if (fallbackPlaceholder) {
					fallbackPlaceholder.src = thumbnail
				}
			}

			document.addEventListener('liteYoutubeIframeLoaded', (e: any) => this.trySetupAutoplay(e))
		}

		disconnectedCallback() {}
	}

	customElements.define('lite-youtube-toucher', LiteYoutubeToucher)
</script>

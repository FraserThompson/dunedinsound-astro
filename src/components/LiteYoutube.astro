---
/**
 * Astro wrapper for lite YouTube Component which doesnt immediately load
 * tonnes of Google rubbish. Also uses the YouTube API to grab metadata.
 *
 * Props:
 *  - videoid: the Id of the video
 *  - loadAPI (optional): If true the API will be loaded
 *  - autoload (optional): If true the video will be loaded on page load
 *  - freeAspect (optional): By default it's constrained to 16:9, this removes that constraint.
 */
interface Props {
	videoid: string
	loadAPI?: boolean
	autoload?: boolean
	freeAspect?: boolean
}

const { videoid, loadAPI, autoload, freeAspect } = Astro.props

const cssVars = {
	aspectRatio: freeAspect ? 'auto' : '16/9'
}
---

<lite-youtube-toucher data-videoid={videoid} data-loadapi={loadAPI ? 'true' : undefined}>
	<lite-youtube
		autoload={autoload ? 'true' : undefined}
		videoid={videoid}
		nocookie={'true'}
		posterquality="hqdefault"
		params="enablejsapi=1&rel=0"></lite-youtube>
</lite-youtube-toucher>

<style is:global define:vars={cssVars}>
	lite-youtube-toucher {
		aspect-ratio: var(--aspectRatio);
		height: 100%;
		width: 100%;
	}
	lite-youtube {
		height: 100%;
		width: 100%;
		padding-bottom: 0;
	}
</style>

<script>
	import type { LiteYTEmbed } from '@justinribeiro/lite-youtube'

	// Clientside import because of SSR issues with web components
	import('@justinribeiro/lite-youtube')

	// Wraps the element and calls the youtube API to get the video title and autoplay
	class LiteYoutubeToucher extends HTMLElement {
		APIKey = 'AIzaSyBUlBQysAAKfuSmm4Z92VBMAE9lli3zL58'
		liteYoutube: LiteYTEmbed | null
		ytPlayer: any | undefined

		// The setTimout which is trying to autoplay.
		autoplaySetteruperrer: any | undefined

		// How many times it's tried to autoplay.
		autoplayTries = 0

		titleEl: HTMLElement | undefined
		videoid

		constructor() {
			super()

			const shadow = this.attachShadow({ mode: 'closed' })

			// Attach the API script if we want it
			const shouldLoadAPI = this.getAttribute('data-loadapi')

			if (shouldLoadAPI) {
				const script = document.createElement('script')
				script.setAttribute('src', 'https://www.youtube.com/iframe_api')
				shadow.appendChild(script)
			}

			// Add an element for the title
			this.titleEl = document.createElement('h4')
			const style = document.createElement('style')
			style.innerHTML = `
				h4 { 
				  position: absolute;
					left: 10px; 
					top: 0px;
					margin-top: 10px;
				}
				:host { 
					display: block;
				  position: relative;
				}
			`
			const slot = document.createElement('slot')
			shadow.appendChild(slot)
			shadow.appendChild(style)
			shadow.appendChild(this.titleEl)

			this.videoid = this.getAttribute('data-videoid')
			this.liteYoutube = this.querySelector('lite-youtube')
		}

		/**
		 * Use the YouTube API to autoplay when the iframe loads.
		 */
		autoPlay = () => {
			// If we've already done it, get out
			if (this.ytPlayer) return

			// Get the actual iframe so we can initialize the API
			const youtubeIframe = this.liteYoutube?.shadowRoot.querySelector('iframe')
			if (!youtubeIframe) return

			try {
				// @ts-ignore
				const player = new YT.Player(youtubeIframe, {
					events: {
						onReady: () => this.playVideo(),
						onPlayerStateChange: (e: any) => {
							if (this.titleEl && e.data >= 0) {
								this.titleEl.style.display = 'none'
							}
						}
					}
				})
				if (player) this.ytPlayer = player
			} catch (e) {
				return
			}
		}

		/**
		 * Plays the video via the YouTube API.
		 */
		playVideo = () => {
			// We can't do it if we haven't init'd the API
			if (!this.ytPlayer) return
			// @ts-ignore
			this.ytPlayer?.setPlaybackQuality('hd720')
			// @ts-ignore
			this.ytPlayer?.playVideo()
		}

		/**
		 * Since it can take a sec for the iframe to load in, we attempt autoplay multiple times.
		 * @param e
		 */
		trySetupAutoplay = (e: any) => {
			// So elements dont respond to other elements events
			if (e.target !== this.liteYoutube) {
				return
			}

			// If the videoId has changed then our previous iframe is invalid
			if (e.target.videoId !== this.videoid) {
				this.ytPlayer = null
			}

			// Consider failed
			if (this.autoplayTries > 10) {
				this.autoplaySetteruperrer && clearTimeout(this.autoplaySetteruperrer)
				this.autoplayTries = 0
				return
			}

			this.autoplayTries = this.autoplayTries + 1

			// If there's an iframe and it's not playing, then try to play again.
			// It should have already played via onReady but maybe it didnt.
			// @ts-ignore
			if (this.ytPlayer && this.ytPlayer.getPlayerState() < 0) {
				this.playVideo()
			} else if (this.ytPlayer) {
				this.autoplaySetteruperrer && clearTimeout(this.autoplaySetteruperrer)
				return
			}

			// Try to autoplay.
			this.autoPlay()

			// If it fails setup a timeout so it tries again
			if (!this.ytPlayer) {
				this.autoplaySetteruperrer = setTimeout(() => this.trySetupAutoplay(e), 100)
			}
		}

		/**
		 * Get the thumbnail and title via the YouTube API if possible.
		 */
		async setThumbnailFromAPI() {
			let response
			try {
				response = await fetch(
					`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${this.videoid}&key=${this.APIKey}`
				)
			} catch (e) {
				// If it fails just leave and we'll use the default thumbnail.
				return
			}

			const data = await response.json()

			if (data.items && data.items.length) {
				const title = data.items[0].snippet.title
				const thumbnail = data.items[0].snippet.thumbnails.maxres
					? data.items[0].snippet.thumbnails.maxres.url
					: data.items[0].snippet.thumbnails.high.url

				if (this.titleEl && title) {
					this.titleEl.innerHTML = title
				}

				// The thumbnail from the API will be used if the element itself failed for some reason.
				const fallbackPlaceholder = this.liteYoutube?.querySelector<HTMLImageElement>('img#fallbackPlaceholder')
				if (fallbackPlaceholder) {
					fallbackPlaceholder.src = thumbnail
				}
			}
		}

		connectedCallback() {
			document.addEventListener('liteYoutubeIframeLoaded', this.trySetupAutoplay)
			this.setThumbnailFromAPI()
		}

		disconnectedCallback() {
			document.removeEventListener('liteYoutubeIframeLoaded', this.trySetupAutoplay)
		}
	}

	customElements.define('lite-youtube-toucher', LiteYoutubeToucher)
</script>

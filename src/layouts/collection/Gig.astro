---
import Banner from 'src/components/Banner.astro'
import type { ProcessedEntry } from 'src/util/collection'
import ImageGallery from 'src/components/ImageGallery.astro'
import Player from 'src/components/gig/Player'
import PlayerContainer from 'src/components/gig/PlayerContainer.astro'
import MapIcon from '~icons/bx/map'
import CornerLabel from 'src/components/gig/CornerLabel.astro'
import BigIntro from 'src/components/gig/BigIntro.astro'
import ArtistMedia from 'src/components/gig/ArtistMedia.astro'
import LiteYoutube from 'src/components/LiteYoutube.astro'
import Divider from 'src/components/Divider.astro'
import { theme } from 'src/Theme.css'
import { GigBannerPlayer, GigFeatureVid } from './Gig.css'
import ArtistDropdown from 'src/components/gig/ArtistDropdown.astro'
import { descriptionWrapper } from 'src/components/ContentByEntry.css'

interface Props {
	entry: ProcessedEntry<'gig'>
}

const { entry } = Astro.props

const entryData = entry.entry.data
const entryExtra = entry.extra

const uncategorizedImages = entryExtra.artistImages?._uncategorized
---

<Banner
	id="top"
	title={entryData.title}
	backgroundImage={entryExtra.cover}
	bottomMargin={theme.dimensions.headerHeightNegative}
	bottomMarginMobile={theme.dimensions.headerHeightMobileNegative}
	hideBackgroundMobile={!!entryData.feature_vid}
	heightMobile="auto"
	height="70vh"
>
	<div slot="title" style={{ marginLeft: 'auto', display: 'flex', gap: '10px' }}>
		{
			entryExtra.venue && (
				<h4 style={{ margin: 0 }}>
					{!entryExtra.venue.data.hidden && (
						<a
							href={`/venues/${entryExtra.venue.id}`}
							style={{ display: 'flex', alignItems: 'center' }}
							class="highlighted"
						>
							<MapIcon />
							<span>{entryExtra.venue.data.title}</span>
						</a>
					)}
					{entryExtra.venue.data.hidden ? entryExtra.venue.data.title : ''}
				</h4>
			)
		}
	</div>
	<div slot={entryData.description ? 'subtitle' : ''}>
		<p class={descriptionWrapper}>
			<Fragment set:html={entryData.description} />
		</p>
	</div>
	{
		!entry.next && (
			<CornerLabel position="right" slot="customContent">
				LATEST GIG
			</CornerLabel>
		)
	}
	<CornerLabel position="left" slot="customContent">
		{entryData.date.toLocaleDateString()}
	</CornerLabel>
	{
		entryExtra.series && (
			<CornerLabel position="right" background={theme.color.transparentForeground} slot="customContent">
				<small style={{ color: theme.color.dullText }}>Series</small>
				<a href={entryExtra.series.extra.absolutePath} class="trippy2">
					<strong>
						{entryExtra.series.entry.data.title} ({entryExtra.series.extra.gigCount} gigs)
					</strong>
				</a>
			</CornerLabel>
		)
	}
	{
		(!!entryExtra.audio?.length || entryData.feature_vid) && (
			<Fragment slot="customContent">
				{entryData.feature_vid && (
					<div class={GigFeatureVid}>
						<LiteYoutube videoid={entryData.feature_vid} loadAPI={true} />
					</div>
				)}
				{!!entryExtra.audio?.length && (
					<div class={GigBannerPlayer}>
						<PlayerContainer>
							<Player artistAudio={entryExtra.audio} hideNextPrevOnMobile={true} client:load />
						</PlayerContainer>
					</div>
				)}
			</Fragment>
		)
	}
</Banner>
<Divider
	sticky={true}
	backgroundColor={theme.color.primary}
	color={theme.color.text}
	height={theme.dimensions.headerHeight}
	heightMobile={theme.dimensions.headerHeightMobile}
	href="#top"
	zIndex="7"
>
	<h3 style={{ marginBottom: 0 }}>{entryData.title}</h3>
</Divider>
{entryData.intro && <BigIntro text={entryData.intro} />}
{!!uncategorizedImages?.length && <ImageGallery images={uncategorizedImages} noLightbox={true} />}
{
	!entryData.audioOnly && (
		<div>
			<ArtistDropdown entry={entry} />
			<ArtistMedia entry={entry} />
		</div>
	)
}

<script>
	import { replaceState } from 'src/util/history'

	document.addEventListener('astro:page-load', () => {
		// Add the intersectionObserver which updates the browser hash.
		// GigsMenu listens for this and highlights the artist.
		const artistElements = document.querySelectorAll('.artist')

		const options = {
			rootMargin: '0px 0px -97%'
		}

		const callback = (entries: IntersectionObserverEntry[]) => {
			if (window.location.hash.includes('image')) return

			const bannerHeight = document.querySelector('#top')?.clientHeight || 0

			entries.forEach((entry) => {
				const url = new URL(window.location.href)

				if (entry.isIntersecting) {
					const el = entry.target

					if (el.id !== window.location.hash.substring(1)) {
						url.hash = el.id
						replaceState(url)
					}
				} else {
					if (window.scrollY < bannerHeight && window.location.hash) {
						url.hash = ''
						replaceState(url)
					}
				}
			})
		}

		const observer = new IntersectionObserver(callback, options)
		artistElements.forEach((el) => observer.observe(el))
	})
</script>

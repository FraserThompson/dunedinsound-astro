---
import Banner from 'src/components/Banner.astro'
import type { ProcessedEntry } from 'src/util/collection'
import ImageGallery from 'src/components/ImageGallery.astro'
import Player from 'src/components/gig/Player'
import PlayerContainer from 'src/components/gig/PlayerContainer.astro'
import MapIcon from '~icons/bx/map'
import DropdownMenu from 'src/components/DropdownMenu'
import { socialLinksToMenuItems } from 'src/util/helpers'
import ShareButton from 'src/components/ShareButton.astro'
import CornerLabel from 'src/components/gig/CornerLabel.astro'
import BigIntro from 'src/components/gig/BigIntro.astro'
import ArtistMedia from 'src/components/gig/ArtistMedia.astro'
import LiteYoutube from 'src/components/LiteYoutube.astro'
import Divider from 'src/components/Divider.astro'
import { theme } from 'src/Theme.css'
import { GigBannerPlayer } from './Gig.css'

interface Props {
	entry: ProcessedEntry<'gig'>
}

const { entry } = Astro.props

const entryData = entry.entry.data
const entryExtra = entry.extra

const uncategorizedImages = entryExtra.artistImages?._uncategorized
---

<Banner
	id="top"
	title={entryData.title}
	backgroundImage={entryExtra.cover}
	bottomMargin={theme.dimensions.headerHeightNegative}
	bottomMarginMobile={theme.dimensions.headerHeightMobileNegative}
	height="80vh"
>
	<div>
		{
			entryExtra.venue && (
				<h3 style={{ marginBottom: '2px' }}>
					{!entryExtra.venue.data.hidden && (
						<a href={`/venues/${entryExtra.venue.id}`} class="highlighted">
							<MapIcon style={{ marginBottom: '-2px' }} />
							{entryExtra.venue.data.title}
						</a>
					)}
					{entryExtra.venue.data.hidden ? entryExtra.venue.data.title : ''}
				</h3>
			)
		}
		<h4 style={{ marginBottom: '2px' }}>
			{entryData.date.toLocaleDateString()}
		</h4>
		{
			entryData.description && (
				<p>
					<Fragment set:html={entryData.description} />
				</p>
			)
		}
		{entryData.feature_vid && <LiteYoutube videoid={entryData.feature_vid} loadAPI={true} />}
		<ShareButton
			style={{ position: 'absolute', left: '50%', transform: 'translate(-50%)' }}
			shareData={{
				title: 'GIG MEDIA: ' + entryData.title,
				url: 'https://dunedinsound.com' + entryExtra.slug,
				text: `Photos, audio and video from ${entryData.title}.`
			}}
		/>
	</div>
	{!entry.next && <CornerLabel slot="customContent">LATEST GIG</CornerLabel>}
	{
		!!entryExtra.audio?.length && (
			<div class={GigBannerPlayer} slot="customContent">
				<PlayerContainer>
					<Player artistAudio={entryExtra.audio} client:load />
				</PlayerContainer>
			</div>
		)
	}
</Banner>
<Divider
	sticky={true}
	backgroundColor={theme.color.primary}
	color={theme.color.text}
	height={theme.dimensions.headerHeight}
	heightMobile={theme.dimensions.headerHeightMobile}
	href="#top"
	zIndex="7"
>
	<h3 style={{ marginBottom: 0 }}>{entryData.title}</h3>
</Divider>
{entryData.intro && <BigIntro text={entryData.intro} />}
{!!uncategorizedImages?.length && <ImageGallery images={uncategorizedImages} noLightbox={true} />}
{
	!entryData.audioOnly && (
		<div>
			<DropdownMenu
				list={entryExtra.artists.map((artist) => ({
					hash: `${artist.id}`,
					title: artist.data.title,
					additionalLinks: [
						...socialLinksToMenuItems(artist.data.links),
						{ href: `/artists/${artist.id}`, title: 'MORE GIGS FROM THIS ARTIST' }
					]
				}))}
				direction="down"
				heightMobile={theme.dimensions.headerHeightMobile}
				height={theme.dimensions.headerHeight}
				textColor={theme.color.contrast}
				client:load
			/>
			<ArtistMedia entry={entry} />
		</div>
	)
}

<script>
	import browserHistory from 'src/util/history'

	document.addEventListener('astro:page-load', () => {
		// Add the intersectionObserver which updates the browser hash.
		// GigsMenu listens for this and highlights the artist.
		const artistElements = document.querySelectorAll('.artist')

		const options = {
			rootMargin: '0px 0px -97%'
		}

		const callback = (entries: IntersectionObserverEntry[]) => {
			if (location.search) return

			const bannerHeight = document.querySelector('#top')?.clientHeight || 0

			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					const el = entry.target
					browserHistory?.replace({
						pathname: window.location.pathname,
						hash: `#${el.id}`
					})
				} else {
					if (window.scrollY < bannerHeight) {
						browserHistory?.replace({ pathname: window.location.pathname, hash: `#top` })
					}
				}
			})
		}

		const observer = new IntersectionObserver(callback, options)
		artistElements.forEach((el) => observer.observe(el))
	})
</script>

---
import type { ProcessedEntry } from 'src/util/collection'
import Room from 'src/components/Room.astro'
import { socialLinksToMenuItems } from 'src/util/helpers'
import LiteYoutube from 'src/components/LiteYoutube.astro'
import { ArtistMetadata, VaultTracklist, VaultTrackLink } from './VaultSession.css'
import PlayerContainer from 'src/components/gig/PlayerContainer.astro'
import Player from 'src/components/gig/Player'

interface Props {
	entry: ProcessedEntry<'vaultsession'>
}
const { entry } = Astro.props

const entryData = entry.entry.data
const entryExtra = entry.extra
---

<Room>
	<LiteYoutube videoid={entryData.full_video} autoload={true} loadAPI={true} freeAspect={true} slot="back" />
	<div class="title" slot="top">
		<h2 class="monospace">{entryData.title}</h2>
		<h4 class="monospace">Recorded on {entryData.date}</h4>
	</div>
	<div slot="bottom"></div>
	<video-controls class={VaultTracklist} slot="left">
		<h3 class="monospace">Tracklist (click to seek)</h3>
		{
			entryData.tracklist?.map((video) => (
				<div>
					<a class={`${VaultTrackLink} trackLink`} data-time={video.time}>
						{video.title}
					</a>{' '}
					{video.link && (
						<a target="_blank" href={`https://youtube.com/watch?v=${video.link}`}>
							<small>(Video)</small>
						</a>
					)}
				</div>
			))
		}
		{
			entryExtra.audio && (
				<a title="FULL MP3 DOWNLOAD" target="_blank" href={entryExtra.audio.files[0]}>
					<h3 class="coolText">⭐DOWNLOAD MP3⭐</h3>
				</a>
			)
		}
	</video-controls>
	<div class={ArtistMetadata} slot="right">
		<h3 class="monospace">More from this artist</h3>
		{
			socialLinksToMenuItems(entryExtra.artist.data.links).map((item) => (
				<li>
					<a href={item.href}>{item.title}</a>
				</li>
			))
		}
	</div>
	{
		entryExtra.audio && (
			<PlayerContainer minimizedAlways={true}>
				<Player artistAudio={[entryExtra.audio]} client:load />
			</PlayerContainer>
		)
	}
</Room>

<script>
	import { timeToSeconds } from 'src/util/helpers'

	class VideoControls extends HTMLElement {
		_internals: any

		trackLinks: NodeListOf<HTMLElement>
		trackTimes: number[]

		playerTime = 0
		activeTrack = 0

		player: any

		interval: any

		constructor() {
			super()
			this.trackLinks = this.querySelectorAll('.trackLink')
			this.trackTimes = [...this.trackLinks].map((track) => timeToSeconds(track.getAttribute('data-time') || '00:00'))
		}

		/**
		 * Runs every second and updates the class on the active track.
		 */
		tick() {
			if (!this.player) return

			this.playerTime = this.player.getCurrentTime()

			let activeTrack = 0

			this.trackTimes.forEach((trackTime, i) => {
				const nextTrackTime = i + 1 < this.trackTimes.length && this.trackTimes[i + 1]
				if (this.playerTime >= trackTime && (nextTrackTime ? this.playerTime < nextTrackTime : true)) {
					activeTrack = i
				}
			})

			// If we're on a differnt track...
			if (this.activeTrack !== activeTrack) {
				this.trackLinks[this.activeTrack].classList.remove('active')
				this.activeTrack = activeTrack
				this.trackLinks[activeTrack].classList.add('active')
			}
		}

		/**
		 * Seeks the video to a time in seconds.
		 * @param time
		 */
		seekVideoTo(time: number) {
			this.player && this.player.seekTo(time, true)
			this.playerTime = time
		}

		/**
		 * Handler for clicking a track on the sidebar.
		 * @param e
		 */
		trackClickHandler(e: MouseEvent) {
			if (!(e.currentTarget instanceof HTMLElement)) return

			const time = e.currentTarget.getAttribute('data-time') || '0'
			this.seekVideoTo(timeToSeconds(time))
		}

		/**
		 * When the player is ready play the video.
		 */
		onPlayerReady(e: any) {
			e.target.setPlaybackQuality('hd720')
			e.target.playVideo()
			this.player = e.target
		}

		setIframe(e: any) {
			// @ts-ignore
			new YT.Player(e.target.shadowRoot.querySelector('iframe'), {
				events: {
					onReady: (e: any) => this.onPlayerReady(e)
				}
			})
		}

		connectedCallback() {
			this.interval = setInterval(() => this.tick(), 1000)
			this.trackLinks.forEach((link) => link.addEventListener('mousedown', (e) => this.trackClickHandler(e)))
			document.addEventListener('liteYoutubeIframeLoaded', (e) => this.setIframe(e))
		}

		disconnectedCallback() {
			clearInterval(this.interval)
		}
	}

	customElements.define('video-controls', VideoControls)
</script>

<style>
	.title {
		position: absolute;
		top: 0px;
		z-index: 2;
		width: 100%;
		text-align: center;
		h2 {
			margin: 0;
			font-size: 12vh;
			color: cyan;
			letter-spacing: -5px;
			height: auto;
			text-align: center;
			font-family: monospace;
		}
		h4 {
			font-family: monospace;
		}
	}
</style>

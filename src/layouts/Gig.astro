---
import Banner from 'src/components/Banner.astro'
import type { ProcessedEntry } from 'src/util/collection.ts'
import ImageGallery from 'src/components/ImageGallery.astro'
import Player from 'src/components/gig/Player'
import PlayerContainer from 'src/components/gig/PlayerContainer.astro'
import MapIcon from '~icons/bx/map'
import DropdownMenu from 'src/components/DropdownMenu'
import { socialLinksToMenuItems } from 'src/util/helpers.ts'
import ShareButton from 'src/components/ShareButton.astro'
import CornerLabel from 'src/components/gig/CornerLabel.astro'
import BigIntro from 'src/components/gig/BigIntro.astro'
import ArtistMedia from 'src/components/gig/ArtistMedia.astro'
import LiteYoutube from 'src/components/LiteYoutube.astro'

interface Props {
	entry: ProcessedEntry<'gig'>
}

const { entry } = Astro.props

const entryData = entry.entry.data
const entryExtra = entry.extra

const uncategorizedImages = entryExtra.artistImages?._uncategorized
---

<Banner id="top" title={entryData.title} backgroundImage={entryExtra.cover}>
	<div>
		{
			entryExtra.venue && (
				<h3 style={{ marginBottom: '2px' }}>
					<a href={`/venues/${entryExtra.venue.id}`} class="highlighted">
						<MapIcon style={{ marginBottom: '-2px' }} />
						{entryExtra.venue.data.title}
					</a>
				</h3>
			)
		}
		<h4 style={{ marginBottom: '2px' }}>
			{entryData.date.toLocaleDateString()}
		</h4>
		{
			entryData.description && (
				<p>
					<Fragment set:html={entryData.description} />
				</p>
			)
		}
		{entryData.feature_vid && <LiteYoutube videoid={entryData.feature_vid} />}
		<ShareButton
			style={{ position: 'absolute', left: '50%', transform: 'translate(-50%)' }}
			shareData={{
				title: 'GIG MEDIA: ' + entryData.title,
				url: 'https://dunedinsound.com' + entryExtra.slug,
				text: `Photos, audio and video from ${entryData.title}.`
			}}
		/>
	</div>
	<div slot="customContent">
		<div style={{ width: '100%', margin: '0 auto' }}></div>
		{!entry.next && <CornerLabel>LATEST GIG</CornerLabel>}
		{
			entryExtra.audio && (
				<PlayerContainer>
					<Player artistAudio={Object.values(entryExtra.audio)} client:load />
				</PlayerContainer>
			)
		}
	</div>
</Banner>
{entryData.intro && <BigIntro text={entryData.intro} />}
{!!uncategorizedImages?.length && <ImageGallery images={uncategorizedImages} />}
{
	!entryData.audioOnly && (
		<div>
			<DropdownMenu
				list={entryExtra.artists.map((artist) => ({
					hash: `${artist.id}`,
					title: artist.data.title,
					additionalLinks: [...socialLinksToMenuItems(artist.data.links), { href: `/artists/${artist.id}`, title: '>' }]
				}))}
				direction="down"
				client:load
			/>
			<ArtistMedia entry={entry} />
		</div>
	)
}

<script>
	import browserHistory from 'src/util/history.ts'

	// Add the intersectionObserver which updates the browser hash.
	// GigsMenu listens for this and highlights the artist.
	const artistElements = document.querySelectorAll('.artist')

	const options = {
		rootMargin: '0px 0px -97%'
	}

	const callback = (entries: IntersectionObserverEntry[]) => {
		if (location.search) return

		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				const el = entry.target
				browserHistory?.replace({
					hash: '#' + el.id
				})
			} else {
				const bannerHeight = document.querySelector('.banner')?.clientHeight || 0
				if (window.scrollY < bannerHeight + 150) {
					browserHistory?.replace({
						hash: ''
					})
				}
			}
		})
	}

	const observer = new IntersectionObserver(callback, options)
	artistElements.forEach((el) => observer.observe(el))
</script>
